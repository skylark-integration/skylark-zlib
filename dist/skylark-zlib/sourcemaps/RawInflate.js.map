{"version":3,"sources":["RawInflate.js"],"names":["define","Zlib","Huffman","table","buildHuffmanTable","RawInflate","input","opt_params","this","buffer","blocks","bufferSize","totalpos","ip","bitsbuf","bitsbuflen","Uint8Array","output","op","bfinal","bufferType","BufferType","ADAPTIVE","resize","BLOCK","MaxBackwardLength","MaxCopyLength","expandBuffer","expandBufferAdaptive","concatBuffer","concatBufferDynamic","decodeHuffman","decodeHuffmanAdaptive","Error","prototype","decompress","parseBlock","Order","Uint16Array","LengthCodeTable","LengthExtraTable","DistCodeTable","DistExtraTable","FixedLiteralLengthTable","i","il","lengths","length","FixedDistanceTable","hdr","readBits","parseUncompressedBlock","parseFixedHuffmanBlock","parseDynamicHuffmanBlock","octet","inputLength","readCodeByTable","codeWithLength","codeLength","codeTable","maxCodeLength","len","preCopy","olength","set","subarray","fixRatio","codeLengthsTable","litlenTable","distTable","lengthTable","code","prev","repeat","hlit","hdist","hclen","codeLengths","litlen","dist","currentLitlenTable","ti","codeDist","opt_param","backward","push","newSize","maxInflateSize","ratio","addRatio","block","j","jl","pos","limit"],"mappings":"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","file":"../RawInflate.js","sourcesContent":["define([\r\n  \"./zlib\",\r\n  \"./huffman\"\r\n],function(Zlib,Huffman) {\r\n  const USE_TYPEDARRAY = true;\r\n\r\n  //-----------------------------------------------------------------------------\r\n\r\n  /** @define {number} buffer block size. */\r\n  var ZLIB_RAW_INFLATE_BUFFER_SIZE = 0x8000; // [ 0x8000 >= ZLIB_BUFFER_BLOCK_SIZE ]\r\n\r\n  //-----------------------------------------------------------------------------\r\n\r\n  var buildHuffmanTable = Huffman.buildHuffmanTable;\r\n\r\n  /**\r\n   * @constructor\r\n   * @param {!(Uint8Array|Array.<number>)} input input buffer.\r\n   * @param {Object} opt_params option parameter.\r\n   *\r\n   * opt_params は以下のプロパティを指定する事ができます。\r\n   *   - index: input buffer の deflate コンテナの開始位置.\r\n   *   - blockSize: バッファのブロックサイズ.\r\n   *   - bufferType: RawInflate.BufferType の値によってバッファの管理方法を指定する.\r\n   *   - resize: 確保したバッファが実際の大きさより大きかった場合に切り詰める.\r\n   */\r\n  var RawInflate = function(input, opt_params) {\r\n    /** @type {!(Array.<number>|Uint8Array)} inflated buffer */\r\n    this.buffer;\r\n    /** @type {!Array.<(Array.<number>|Uint8Array)>} */\r\n    this.blocks = [];\r\n    /** @type {number} block size. */\r\n    this.bufferSize = ZLIB_RAW_INFLATE_BUFFER_SIZE;\r\n    /** @type {!number} total output buffer pointer. */\r\n    this.totalpos = 0;\r\n    /** @type {!number} input buffer pointer. */\r\n    this.ip = 0;\r\n    /** @type {!number} bit stream reader buffer. */\r\n    this.bitsbuf = 0;\r\n    /** @type {!number} bit stream reader buffer size. */\r\n    this.bitsbuflen = 0;\r\n    /** @type {!(Array.<number>|Uint8Array)} input buffer. */\r\n    this.input = USE_TYPEDARRAY ? new Uint8Array(input) : input;\r\n    /** @type {!(Uint8Array|Array.<number>)} output buffer. */\r\n    this.output;\r\n    /** @type {!number} output buffer pointer. */\r\n    this.op;\r\n    /** @type {boolean} is final block flag. */\r\n    this.bfinal = false;\r\n    /** @type {RawInflate.BufferType} buffer management. */\r\n    this.bufferType = RawInflate.BufferType.ADAPTIVE;\r\n    /** @type {boolean} resize flag for memory size optimization. */\r\n    this.resize = false;\r\n\r\n    // option parameters\r\n    if (opt_params || !(opt_params = {})) {\r\n      if (opt_params['index']) {\r\n        this.ip = opt_params['index'];\r\n      }\r\n      if (opt_params['bufferSize']) {\r\n        this.bufferSize = opt_params['bufferSize'];\r\n      }\r\n      if (opt_params['bufferType']) {\r\n        this.bufferType = opt_params['bufferType'];\r\n      }\r\n      if (opt_params['resize']) {\r\n        this.resize = opt_params['resize'];\r\n      }\r\n    }\r\n\r\n    // initialize\r\n    switch (this.bufferType) {\r\n      case RawInflate.BufferType.BLOCK:\r\n        this.op = RawInflate.MaxBackwardLength;\r\n        this.output =\r\n          new (USE_TYPEDARRAY ? Uint8Array : Array)(\r\n            RawInflate.MaxBackwardLength +\r\n            this.bufferSize +\r\n            RawInflate.MaxCopyLength\r\n          );\r\n        break;\r\n      case RawInflate.BufferType.ADAPTIVE:\r\n        this.op = 0;\r\n        this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(this.bufferSize);\r\n        this.expandBuffer = this.expandBufferAdaptive;\r\n        this.concatBuffer = this.concatBufferDynamic;\r\n        this.decodeHuffman = this.decodeHuffmanAdaptive;\r\n        break;\r\n      default:\r\n        throw new Error('invalid inflate mode');\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @enum {number}\r\n   */\r\n  RawInflate.BufferType = {\r\n    BLOCK: 0,\r\n    ADAPTIVE: 1\r\n  };\r\n\r\n  /**\r\n   * decompress.\r\n   * @return {!(Uint8Array|Array.<number>)} inflated buffer.\r\n   */\r\n  RawInflate.prototype.decompress = function() {\r\n    while (!this.bfinal) {\r\n      this.parseBlock();\r\n    }\r\n\r\n    return this.concatBuffer();\r\n  };\r\n\r\n  /**\r\n   * @const\r\n   * @type {number} max backward length for LZ77.\r\n   */\r\n  RawInflate.MaxBackwardLength = 32768;\r\n\r\n  /**\r\n   * @const\r\n   * @type {number} max copy length for LZ77.\r\n   */\r\n  RawInflate.MaxCopyLength = 258;\r\n\r\n  /**\r\n   * huffman order\r\n   * @const\r\n   * @type {!(Array.<number>|Uint8Array)}\r\n   */\r\n  RawInflate.Order = (function(table) {\r\n    return USE_TYPEDARRAY ? new Uint16Array(table) : table;\r\n  })([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\r\n\r\n  /**\r\n   * huffman length code table.\r\n   * @const\r\n   * @type {!(Array.<number>|Uint16Array)}\r\n   */\r\n  RawInflate.LengthCodeTable = (function(table) {\r\n    return USE_TYPEDARRAY ? new Uint16Array(table) : table;\r\n  })([\r\n    0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000a, 0x000b,\r\n    0x000d, 0x000f, 0x0011, 0x0013, 0x0017, 0x001b, 0x001f, 0x0023, 0x002b,\r\n    0x0033, 0x003b, 0x0043, 0x0053, 0x0063, 0x0073, 0x0083, 0x00a3, 0x00c3,\r\n    0x00e3, 0x0102, 0x0102, 0x0102\r\n  ]);\r\n\r\n  /**\r\n   * huffman length extra-bits table.\r\n   * @const\r\n   * @type {!(Array.<number>|Uint8Array)}\r\n   */\r\n  RawInflate.LengthExtraTable = (function(table) {\r\n    return USE_TYPEDARRAY ? new Uint8Array(table) : table;\r\n  })([\r\n    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5,\r\n    5, 5, 0, 0, 0\r\n  ]);\r\n\r\n  /**\r\n   * huffman dist code table.\r\n   * @const\r\n   * @type {!(Array.<number>|Uint16Array)}\r\n   */\r\n  RawInflate.DistCodeTable = (function(table) {\r\n    return USE_TYPEDARRAY ? new Uint16Array(table) : table;\r\n  })([\r\n    0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0007, 0x0009, 0x000d, 0x0011,\r\n    0x0019, 0x0021, 0x0031, 0x0041, 0x0061, 0x0081, 0x00c1, 0x0101, 0x0181,\r\n    0x0201, 0x0301, 0x0401, 0x0601, 0x0801, 0x0c01, 0x1001, 0x1801, 0x2001,\r\n    0x3001, 0x4001, 0x6001\r\n  ]);\r\n\r\n  /**\r\n   * huffman dist extra-bits table.\r\n   * @const\r\n   * @type {!(Array.<number>|Uint8Array)}\r\n   */\r\n  RawInflate.DistExtraTable = (function(table) {\r\n    return USE_TYPEDARRAY ? new Uint8Array(table) : table;\r\n  })([\r\n    0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11,\r\n    11, 12, 12, 13, 13\r\n  ]);\r\n\r\n  /**\r\n   * fixed huffman length code table\r\n   * @const\r\n   * @type {!Array}\r\n   */\r\n  RawInflate.FixedLiteralLengthTable = (function(table) {\r\n    return table;\r\n  })((function() {\r\n    var lengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(288);\r\n    var i, il;\r\n\r\n    for (i = 0, il = lengths.length; i < il; ++i) {\r\n      lengths[i] =\r\n        (i <= 143) ? 8 :\r\n        (i <= 255) ? 9 :\r\n        (i <= 279) ? 7 :\r\n        8;\r\n    }\r\n\r\n    return buildHuffmanTable(lengths);\r\n  })());\r\n\r\n  /**\r\n   * fixed huffman distance code table\r\n   * @const\r\n   * @type {!Array}\r\n   */\r\n  RawInflate.FixedDistanceTable = (function(table) {\r\n    return table;\r\n  })((function() {\r\n    var lengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(30);\r\n    var i, il;\r\n\r\n    for (i = 0, il = lengths.length; i < il; ++i) {\r\n      lengths[i] = 5;\r\n    }\r\n\r\n    return buildHuffmanTable(lengths);\r\n  })());\r\n\r\n  /**\r\n   * parse deflated block.\r\n   */\r\n  RawInflate.prototype.parseBlock = function() {\r\n    /** @type {number} header */\r\n    var hdr = this.readBits(3);\r\n\r\n    // BFINAL\r\n    if (hdr & 0x1) {\r\n      this.bfinal = true;\r\n    }\r\n\r\n    // BTYPE\r\n    hdr >>>= 1;\r\n    switch (hdr) {\r\n      // uncompressed\r\n      case 0:\r\n        this.parseUncompressedBlock();\r\n        break;\r\n      // fixed huffman\r\n      case 1:\r\n        this.parseFixedHuffmanBlock();\r\n        break;\r\n      // dynamic huffman\r\n      case 2:\r\n        this.parseDynamicHuffmanBlock();\r\n        break;\r\n      // reserved or other\r\n      default:\r\n        throw new Error('unknown BTYPE: ' + hdr);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * read inflate bits\r\n   * @param {number} length bits length.\r\n   * @return {number} read bits.\r\n   */\r\n  RawInflate.prototype.readBits = function(length) {\r\n    var bitsbuf = this.bitsbuf;\r\n    var bitsbuflen = this.bitsbuflen;\r\n    var input = this.input;\r\n    var ip = this.ip;\r\n\r\n    /** @type {number} */\r\n    var inputLength = input.length;\r\n    /** @type {number} input and output byte. */\r\n    var octet;\r\n\r\n    // not enough buffer\r\n    while (bitsbuflen < length) {\r\n      // input byte\r\n      if (ip >= inputLength) {\r\n        throw new Error('input buffer is broken');\r\n      }\r\n\r\n      // concat octet\r\n      bitsbuf |= input[ip++] << bitsbuflen;\r\n      bitsbuflen += 8;\r\n    }\r\n\r\n    // output byte\r\n    octet = bitsbuf & /* MASK */ ((1 << length) - 1);\r\n    bitsbuf >>>= length;\r\n    bitsbuflen -= length;\r\n\r\n    this.bitsbuf = bitsbuf;\r\n    this.bitsbuflen = bitsbuflen;\r\n    this.ip = ip;\r\n\r\n    return octet;\r\n  };\r\n\r\n  /**\r\n   * read huffman code using table\r\n   * @param {!(Array.<number>|Uint8Array|Uint16Array)} table huffman code table.\r\n   * @return {number} huffman code.\r\n   */\r\n  RawInflate.prototype.readCodeByTable = function(table) {\r\n    var bitsbuf = this.bitsbuf;\r\n    var bitsbuflen = this.bitsbuflen;\r\n    var input = this.input;\r\n    var ip = this.ip;\r\n\r\n    /** @type {number} */\r\n    var inputLength = input.length;\r\n    /** @type {!(Array.<number>|Uint8Array)} huffman code table */\r\n    var codeTable = table[0];\r\n    /** @type {number} */\r\n    var maxCodeLength = table[1];\r\n    /** @type {number} code length & code (16bit, 16bit) */\r\n    var codeWithLength;\r\n    /** @type {number} code bits length */\r\n    var codeLength;\r\n\r\n    // not enough buffer\r\n    while (bitsbuflen < maxCodeLength) {\r\n      if (ip >= inputLength) {\r\n        break;\r\n      }\r\n      bitsbuf |= input[ip++] << bitsbuflen;\r\n      bitsbuflen += 8;\r\n    }\r\n\r\n    // read max length\r\n    codeWithLength = codeTable[bitsbuf & ((1 << maxCodeLength) - 1)];\r\n    codeLength = codeWithLength >>> 16;\r\n\r\n    if (codeLength > bitsbuflen) {\r\n      throw new Error('invalid code length: ' + codeLength);\r\n    }\r\n\r\n    this.bitsbuf = bitsbuf >> codeLength;\r\n    this.bitsbuflen = bitsbuflen - codeLength;\r\n    this.ip = ip;\r\n\r\n    return codeWithLength & 0xffff;\r\n  };\r\n\r\n  /**\r\n   * parse uncompressed block.\r\n   */\r\n  RawInflate.prototype.parseUncompressedBlock = function() {\r\n    var input = this.input;\r\n    var ip = this.ip;\r\n    var output = this.output;\r\n    var op = this.op;\r\n\r\n    /** @type {number} */\r\n    var inputLength = input.length;\r\n    /** @type {number} block length */\r\n    var len;\r\n    /** @type {number} number for check block length */\r\n    var nlen;\r\n    /** @type {number} output buffer length */\r\n    var olength = output.length;\r\n    /** @type {number} copy counter */\r\n    var preCopy;\r\n\r\n    // skip buffered header bits\r\n    this.bitsbuf = 0;\r\n    this.bitsbuflen = 0;\r\n\r\n    // len\r\n    if (ip + 1 >= inputLength) {\r\n      throw new Error('invalid uncompressed block header: LEN');\r\n    }\r\n    len = input[ip++] | (input[ip++] << 8);\r\n\r\n    // nlen\r\n    if (ip + 1 >= inputLength) {\r\n      throw new Error('invalid uncompressed block header: NLEN');\r\n    }\r\n    nlen = input[ip++] | (input[ip++] << 8);\r\n\r\n    // check len & nlen\r\n    if (len === ~nlen) {\r\n      throw new Error('invalid uncompressed block header: length verify');\r\n    }\r\n\r\n    // check size\r\n    if (ip + len > input.length) { throw new Error('input buffer is broken'); }\r\n\r\n    // expand buffer\r\n    switch (this.bufferType) {\r\n      case RawInflate.BufferType.BLOCK:\r\n        // pre copy\r\n        while (op + len > output.length) {\r\n          preCopy = olength - op;\r\n          len -= preCopy;\r\n          if (USE_TYPEDARRAY) {\r\n            output.set(input.subarray(ip, ip + preCopy), op);\r\n            op += preCopy;\r\n            ip += preCopy;\r\n          } else {\r\n            while (preCopy--) {\r\n              output[op++] = input[ip++];\r\n            }\r\n          }\r\n          this.op = op;\r\n          output = this.expandBuffer();\r\n          op = this.op;\r\n        }\r\n        break;\r\n      case RawInflate.BufferType.ADAPTIVE:\r\n        while (op + len > output.length) {\r\n          output = this.expandBuffer({fixRatio: 2});\r\n        }\r\n        break;\r\n      default:\r\n        throw new Error('invalid inflate mode');\r\n    }\r\n\r\n    // copy\r\n    if (USE_TYPEDARRAY) {\r\n      output.set(input.subarray(ip, ip + len), op);\r\n      op += len;\r\n      ip += len;\r\n    } else {\r\n      while (len--) {\r\n        output[op++] = input[ip++];\r\n      }\r\n    }\r\n\r\n    this.ip = ip;\r\n    this.op = op;\r\n    this.output = output;\r\n  };\r\n\r\n  /**\r\n   * parse fixed huffman block.\r\n   */\r\n  RawInflate.prototype.parseFixedHuffmanBlock = function() {\r\n    this.decodeHuffman(\r\n      RawInflate.FixedLiteralLengthTable,\r\n      RawInflate.FixedDistanceTable\r\n    );\r\n  };\r\n\r\n  /**\r\n   * parse dynamic huffman block.\r\n   */\r\n  RawInflate.prototype.parseDynamicHuffmanBlock = function() {\r\n    /** @type {number} number of literal and length codes. */\r\n    var hlit = this.readBits(5) + 257;\r\n    /** @type {number} number of distance codes. */\r\n    var hdist = this.readBits(5) + 1;\r\n    /** @type {number} number of code lengths. */\r\n    var hclen = this.readBits(4) + 4;\r\n    /** @type {!(Uint8Array|Array.<number>)} code lengths. */\r\n    var codeLengths =\r\n      new (USE_TYPEDARRAY ? Uint8Array : Array)(RawInflate.Order.length);\r\n    /** @type {!Array} code lengths table. */\r\n    var codeLengthsTable;\r\n    /** @type {!(Uint8Array|Array.<number>)} literal and length code table. */\r\n    var litlenTable;\r\n    /** @type {!(Uint8Array|Array.<number>)} distance code table. */\r\n    var distTable;\r\n    /** @type {!(Uint8Array|Array.<number>)} code length table. */\r\n    var lengthTable;\r\n    /** @type {number} */\r\n    var code;\r\n    /** @type {number} */\r\n    var prev;\r\n    /** @type {number} */\r\n    var repeat;\r\n    /** @type {number} loop counter. */\r\n    var i;\r\n    /** @type {number} loop limit. */\r\n    var il;\r\n\r\n    // decode code lengths\r\n    for (i = 0; i < hclen; ++i) {\r\n      codeLengths[RawInflate.Order[i]] = this.readBits(3);\r\n    }\r\n    if (!USE_TYPEDARRAY) {\r\n      for (i = hclen, hclen = codeLengths.length; i < hclen; ++i) {\r\n        codeLengths[RawInflate.Order[i]] = 0;\r\n      }\r\n    }\r\n\r\n    // decode length table\r\n    codeLengthsTable = buildHuffmanTable(codeLengths);\r\n    lengthTable = new (USE_TYPEDARRAY ? Uint8Array : Array)(hlit + hdist);\r\n    for (i = 0, il = hlit + hdist; i < il;) {\r\n      code = this.readCodeByTable(codeLengthsTable);\r\n      switch (code) {\r\n        case 16:\r\n          repeat = 3 + this.readBits(2);\r\n          while (repeat--) { lengthTable[i++] = prev; }\r\n          break;\r\n        case 17:\r\n          repeat = 3 + this.readBits(3);\r\n          while (repeat--) { lengthTable[i++] = 0; }\r\n          prev = 0;\r\n          break;\r\n        case 18:\r\n          repeat = 11 + this.readBits(7);\r\n          while (repeat--) { lengthTable[i++] = 0; }\r\n          prev = 0;\r\n          break;\r\n        default:\r\n          lengthTable[i++] = code;\r\n          prev = code;\r\n          break;\r\n      }\r\n    }\r\n\r\n    litlenTable = USE_TYPEDARRAY\r\n      ? buildHuffmanTable(lengthTable.subarray(0, hlit))\r\n      : buildHuffmanTable(lengthTable.slice(0, hlit));\r\n    distTable = USE_TYPEDARRAY\r\n      ? buildHuffmanTable(lengthTable.subarray(hlit))\r\n      : buildHuffmanTable(lengthTable.slice(hlit));\r\n\r\n    this.decodeHuffman(litlenTable, distTable);\r\n  };\r\n\r\n  /**\r\n   * decode huffman code\r\n   * @param {!(Array.<number>|Uint16Array)} litlen literal and length code table.\r\n   * @param {!(Array.<number>|Uint8Array)} dist distination code table.\r\n   */\r\n  RawInflate.prototype.decodeHuffman = function(litlen, dist) {\r\n    var output = this.output;\r\n    var op = this.op;\r\n\r\n    this.currentLitlenTable = litlen;\r\n\r\n    /** @type {number} output position limit. */\r\n    var olength = output.length - RawInflate.MaxCopyLength;\r\n    /** @type {number} huffman code. */\r\n    var code;\r\n    /** @type {number} table index. */\r\n    var ti;\r\n    /** @type {number} huffman code distination. */\r\n    var codeDist;\r\n    /** @type {number} huffman code length. */\r\n    var codeLength;\r\n\r\n    while ((code = this.readCodeByTable(litlen)) !== 256) {\r\n      // literal\r\n      if (code < 256) {\r\n        if (op >= olength) {\r\n          this.op = op;\r\n          output = this.expandBuffer();\r\n          op = this.op;\r\n        }\r\n        output[op++] = code;\r\n\r\n        continue;\r\n      }\r\n\r\n      // length code\r\n      ti = code - 257;\r\n      codeLength = RawInflate.LengthCodeTable[ti];\r\n      if (RawInflate.LengthExtraTable[ti] > 0) {\r\n        codeLength += this.readBits(RawInflate.LengthExtraTable[ti]);\r\n      }\r\n\r\n      // dist code\r\n      code = this.readCodeByTable(dist);\r\n      codeDist = RawInflate.DistCodeTable[code];\r\n      if (RawInflate.DistExtraTable[code] > 0) {\r\n        codeDist += this.readBits(RawInflate.DistExtraTable[code]);\r\n      }\r\n\r\n      // lz77 decode\r\n      if (op >= olength) {\r\n        this.op = op;\r\n        output = this.expandBuffer();\r\n        op = this.op;\r\n      }\r\n      while (codeLength--) {\r\n        output[op] = output[(op++) - codeDist];\r\n      }\r\n    }\r\n\r\n    while (this.bitsbuflen >= 8) {\r\n      this.bitsbuflen -= 8;\r\n      this.ip--;\r\n    }\r\n    this.op = op;\r\n  };\r\n\r\n  /**\r\n   * decode huffman code (adaptive)\r\n   * @param {!(Array.<number>|Uint16Array)} litlen literal and length code table.\r\n   * @param {!(Array.<number>|Uint8Array)} dist distination code table.\r\n   */\r\n  RawInflate.prototype.decodeHuffmanAdaptive = function(litlen, dist) {\r\n    var output = this.output;\r\n    var op = this.op;\r\n\r\n    this.currentLitlenTable = litlen;\r\n\r\n    /** @type {number} output position limit. */\r\n    var olength = output.length;\r\n    /** @type {number} huffman code. */\r\n    var code;\r\n    /** @type {number} table index. */\r\n    var ti;\r\n    /** @type {number} huffman code distination. */\r\n    var codeDist;\r\n    /** @type {number} huffman code length. */\r\n    var codeLength;\r\n\r\n    while ((code = this.readCodeByTable(litlen)) !== 256) {\r\n      // literal\r\n      if (code < 256) {\r\n        if (op >= olength) {\r\n          output = this.expandBuffer();\r\n          olength = output.length;\r\n        }\r\n        output[op++] = code;\r\n\r\n        continue;\r\n      }\r\n\r\n      // length code\r\n      ti = code - 257;\r\n      codeLength = RawInflate.LengthCodeTable[ti];\r\n      if (RawInflate.LengthExtraTable[ti] > 0) {\r\n        codeLength += this.readBits(RawInflate.LengthExtraTable[ti]);\r\n      }\r\n\r\n      // dist code\r\n      code = this.readCodeByTable(dist);\r\n      codeDist = RawInflate.DistCodeTable[code];\r\n      if (RawInflate.DistExtraTable[code] > 0) {\r\n        codeDist += this.readBits(RawInflate.DistExtraTable[code]);\r\n      }\r\n\r\n      // lz77 decode\r\n      if (op + codeLength > olength) {\r\n        output = this.expandBuffer();\r\n        olength = output.length;\r\n      }\r\n      while (codeLength--) {\r\n        output[op] = output[(op++) - codeDist];\r\n      }\r\n    }\r\n\r\n    while (this.bitsbuflen >= 8) {\r\n      this.bitsbuflen -= 8;\r\n      this.ip--;\r\n    }\r\n    this.op = op;\r\n  };\r\n\r\n  /**\r\n   * expand output buffer.\r\n   * @param {Object=} opt_param option parameters.\r\n   * @return {!(Array.<number>|Uint8Array)} output buffer.\r\n   */\r\n  RawInflate.prototype.expandBuffer = function(opt_param) {\r\n    /** @type {!(Array.<number>|Uint8Array)} store buffer. */\r\n    var buffer =\r\n      new (USE_TYPEDARRAY ? Uint8Array : Array)(\r\n          this.op - RawInflate.MaxBackwardLength\r\n      );\r\n    /** @type {number} backward base point */\r\n    var backward = this.op - RawInflate.MaxBackwardLength;\r\n    /** @type {number} copy index. */\r\n    var i;\r\n    /** @type {number} copy limit */\r\n    var il;\r\n\r\n    var output = this.output;\r\n\r\n    // copy to output buffer\r\n    if (USE_TYPEDARRAY) {\r\n      buffer.set(output.subarray(RawInflate.MaxBackwardLength, buffer.length));\r\n    } else {\r\n      for (i = 0, il = buffer.length; i < il; ++i) {\r\n        buffer[i] = output[i + RawInflate.MaxBackwardLength];\r\n      }\r\n    }\r\n\r\n    this.blocks.push(buffer);\r\n    this.totalpos += buffer.length;\r\n\r\n    // copy to backward buffer\r\n    if (USE_TYPEDARRAY) {\r\n      output.set(\r\n        output.subarray(backward, backward + RawInflate.MaxBackwardLength)\r\n      );\r\n    } else {\r\n      for (i = 0; i < RawInflate.MaxBackwardLength; ++i) {\r\n        output[i] = output[backward + i];\r\n      }\r\n    }\r\n\r\n    this.op = RawInflate.MaxBackwardLength;\r\n\r\n    return output;\r\n  };\r\n\r\n  /**\r\n   * expand output buffer. (adaptive)\r\n   * @param {Object=} opt_param option parameters.\r\n   * @return {!(Array.<number>|Uint8Array)} output buffer pointer.\r\n   */\r\n  RawInflate.prototype.expandBufferAdaptive = function(opt_param) {\r\n    /** @type {!(Array.<number>|Uint8Array)} store buffer. */\r\n    var buffer;\r\n    /** @type {number} expantion ratio. */\r\n    var ratio = (this.input.length / this.ip + 1) | 0;\r\n    /** @type {number} maximum number of huffman code. */\r\n    var maxHuffCode;\r\n    /** @type {number} new output buffer size. */\r\n    var newSize;\r\n    /** @type {number} max inflate size. */\r\n    var maxInflateSize;\r\n\r\n    var input = this.input;\r\n    var output = this.output;\r\n\r\n    if (opt_param) {\r\n      if (typeof opt_param.fixRatio === 'number') {\r\n        ratio = opt_param.fixRatio;\r\n      }\r\n      if (typeof opt_param.addRatio === 'number') {\r\n        ratio += opt_param.addRatio;\r\n      }\r\n    }\r\n\r\n    // calculate new buffer size\r\n    if (ratio < 2) {\r\n      maxHuffCode =\r\n        (input.length - this.ip) / this.currentLitlenTable[2];\r\n      maxInflateSize = (maxHuffCode / 2 * 258) | 0;\r\n      newSize = maxInflateSize < output.length ?\r\n        output.length + maxInflateSize :\r\n        output.length << 1;\r\n    } else {\r\n      newSize = output.length * ratio;\r\n    }\r\n\r\n    // buffer expantion\r\n    if (USE_TYPEDARRAY) {\r\n      buffer = new Uint8Array(newSize);\r\n      buffer.set(output);\r\n    } else {\r\n      buffer = output;\r\n    }\r\n\r\n    this.output = buffer;\r\n\r\n    return this.output;\r\n  };\r\n\r\n  /**\r\n   * concat output buffer.\r\n   * @return {!(Array.<number>|Uint8Array)} output buffer.\r\n   */\r\n  RawInflate.prototype.concatBuffer = function() {\r\n    /** @type {number} buffer pointer. */\r\n    var pos = 0;\r\n    /** @type {number} buffer pointer. */\r\n    var limit = this.totalpos + (this.op - RawInflate.MaxBackwardLength);\r\n    /** @type {!(Array.<number>|Uint8Array)} output block array. */\r\n    var output = this.output;\r\n    /** @type {!Array} blocks array. */\r\n    var blocks = this.blocks;\r\n    /** @type {!(Array.<number>|Uint8Array)} output block array. */\r\n    var block;\r\n    /** @type {!(Array.<number>|Uint8Array)} output buffer. */\r\n    var buffer = new (USE_TYPEDARRAY ? Uint8Array : Array)(limit);\r\n    /** @type {number} loop counter. */\r\n    var i;\r\n    /** @type {number} loop limiter. */\r\n    var il;\r\n    /** @type {number} loop counter. */\r\n    var j;\r\n    /** @type {number} loop limiter. */\r\n    var jl;\r\n\r\n    // single buffer\r\n    if (blocks.length === 0) {\r\n      return USE_TYPEDARRAY ?\r\n        this.output.subarray(RawInflate.MaxBackwardLength, this.op) :\r\n        this.output.slice(RawInflate.MaxBackwardLength, this.op);\r\n    }\r\n\r\n    // copy to buffer\r\n    for (i = 0, il = blocks.length; i < il; ++i) {\r\n      block = blocks[i];\r\n      for (j = 0, jl = block.length; j < jl; ++j) {\r\n        buffer[pos++] = block[j];\r\n      }\r\n    }\r\n\r\n    // current buffer\r\n    for (i = RawInflate.MaxBackwardLength, il = this.op; i < il; ++i) {\r\n      buffer[pos++] = output[i];\r\n    }\r\n\r\n    this.blocks = [];\r\n    this.buffer = buffer;\r\n\r\n    return this.buffer;\r\n  };\r\n\r\n  /**\r\n   * concat output buffer. (dynamic)\r\n   * @return {!(Array.<number>|Uint8Array)} output buffer.\r\n   */\r\n  RawInflate.prototype.concatBufferDynamic = function() {\r\n    /** @type {Array.<number>|Uint8Array} output buffer. */\r\n    var buffer;\r\n    var op = this.op;\r\n\r\n    if (USE_TYPEDARRAY) {\r\n      if (this.resize) {\r\n        buffer = new Uint8Array(op);\r\n        buffer.set(this.output.subarray(0, op));\r\n      } else {\r\n        buffer = this.output.subarray(0, op);\r\n      }\r\n    } else {\r\n      if (this.output.length > op) {\r\n        this.output.length = op;\r\n      }\r\n      buffer = this.output;\r\n    }\r\n\r\n    this.buffer = buffer;\r\n\r\n    return this.buffer;\r\n  };\r\n\r\n  return Zlib.RawInflate = RawInflate;\r\n});\r\n\r\n\r\n\r\n"]}