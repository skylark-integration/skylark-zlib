{"version":3,"sources":["huffman.js"],"names":["define","Zlib","Huffman","buildHuffmanTable","lengths","size","table","bitLength","code","skip","reversed","rtemp","i","il","j","value","listSize","length","maxCodeLength","minCodeLength","Number","POSITIVE_INFINITY","Uint32Array"],"mappings":";;;;;;;AAAAA,QACE,UACA,SAASC,GAGT,IAAIC,GAOJC,kBAA4B,SAASC,GAEnC,IAMIC,EAEAC,EAEAC,EAEAC,EAKAC,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EA7BAC,EAAWZ,EAAQa,OAEnBC,EAAgB,EAEhBC,EAAgBC,OAAOC,kBA4B3B,IAAKT,EAAI,EAAGC,EAAKG,EAAUJ,EAAIC,IAAMD,EAC/BR,EAAQQ,GAAKM,IACfA,EAAgBd,EAAQQ,IAEtBR,EAAQQ,GAAKO,IACfA,EAAgBf,EAAQQ,IAQ5B,IAJAP,EAAO,GAAKa,EACZZ,EAAQ,IAAsBgB,YAAqBjB,GAG9CE,EAAY,EAAGC,EAAO,EAAGC,EAAO,EAAGF,GAAaW,GAAgB,CACnE,IAAKN,EAAI,EAAGA,EAAII,IAAYJ,EAC1B,GAAIR,EAAQQ,KAAOL,EAAW,CAE5B,IAAKG,EAAW,EAAGC,EAAQH,EAAMM,EAAI,EAAGA,EAAIP,IAAaO,EACvDJ,EAAYA,GAAY,EAAc,EAARC,EAC9BA,IAAU,EAQZ,IADAI,EAASR,GAAa,GAAMK,EACvBE,EAAIJ,EAAUI,EAAIT,EAAMS,GAAKL,EAChCH,EAAMQ,GAAKC,IAGXP,IAKJD,EACFC,IAAS,EACTC,IAAS,EAGX,OAAQH,EAAOY,EAAeC,KAGhC,OAAOlB,EAAKC,QAAUA","file":"../huffman.js","sourcesContent":["define([\r\n  \"./zlib\"\r\n],function(Zlib) {\r\n  const USE_TYPEDARRAY = true;\r\n\r\n  var Huffman = {};\r\n\r\n  /**\r\n   * build huffman table from length list.\r\n   * @param {!(Array.<number>|Uint8Array)} lengths length list.\r\n   * @return {!Array} huffman table.\r\n   */\r\n  Huffman.buildHuffmanTable = function(lengths) {\r\n    /** @type {number} length list size. */\r\n    var listSize = lengths.length;\r\n    /** @type {number} max code length for table size. */\r\n    var maxCodeLength = 0;\r\n    /** @type {number} min code length for table size. */\r\n    var minCodeLength = Number.POSITIVE_INFINITY;\r\n    /** @type {number} table size. */\r\n    var size;\r\n    /** @type {!(Array|Uint8Array)} huffman code table. */\r\n    var table;\r\n    /** @type {number} bit length. */\r\n    var bitLength;\r\n    /** @type {number} huffman code. */\r\n    var code;\r\n    /**\r\n     * サイズが 2^maxlength 個のテーブルを埋めるためのスキップ長.\r\n     * @type {number} skip length for table filling.\r\n     */\r\n    var skip;\r\n    /** @type {number} reversed code. */\r\n    var reversed;\r\n    /** @type {number} reverse temp. */\r\n    var rtemp;\r\n    /** @type {number} loop counter. */\r\n    var i;\r\n    /** @type {number} loop limit. */\r\n    var il;\r\n    /** @type {number} loop counter. */\r\n    var j;\r\n    /** @type {number} table value. */\r\n    var value;\r\n\r\n    // Math.max は遅いので最長の値は for-loop で取得する\r\n    for (i = 0, il = listSize; i < il; ++i) {\r\n      if (lengths[i] > maxCodeLength) {\r\n        maxCodeLength = lengths[i];\r\n      }\r\n      if (lengths[i] < minCodeLength) {\r\n        minCodeLength = lengths[i];\r\n      }\r\n    }\r\n\r\n    size = 1 << maxCodeLength;\r\n    table = new (USE_TYPEDARRAY ? Uint32Array : Array)(size);\r\n\r\n    // ビット長の短い順からハフマン符号を割り当てる\r\n    for (bitLength = 1, code = 0, skip = 2; bitLength <= maxCodeLength;) {\r\n      for (i = 0; i < listSize; ++i) {\r\n        if (lengths[i] === bitLength) {\r\n          // ビットオーダーが逆になるためビット長分並びを反転する\r\n          for (reversed = 0, rtemp = code, j = 0; j < bitLength; ++j) {\r\n            reversed = (reversed << 1) | (rtemp & 1);\r\n            rtemp >>= 1;\r\n          }\r\n\r\n          // 最大ビット長をもとにテーブルを作るため、\r\n          // 最大ビット長以外では 0 / 1 どちらでも良い箇所ができる\r\n          // そのどちらでも良い場所は同じ値で埋めることで\r\n          // 本来のビット長以上のビット数取得しても問題が起こらないようにする\r\n          value = (bitLength << 16) | i;\r\n          for (j = reversed; j < size; j += skip) {\r\n            table[j] = value;\r\n          }\r\n\r\n          ++code;\r\n        }\r\n      }\r\n\r\n      // 次のビット長へ\r\n      ++bitLength;\r\n      code <<= 1;\r\n      skip <<= 1;\r\n    }\r\n\r\n    return [table, maxCodeLength, minCodeLength];\r\n  };\r\n\r\n  return Zlib.Huffman = Huffman;\r\n});\r\n\r\n"]}