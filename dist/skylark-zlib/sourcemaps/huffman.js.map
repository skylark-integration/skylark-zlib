{"version":3,"sources":["huffman.js"],"names":["define","Zlib","Huffman","buildHuffmanTable","lengths","size","table","bitLength","code","skip","reversed","rtemp","i","il","j","value","listSize","length","maxCodeLength","minCodeLength","Number","POSITIVE_INFINITY","Uint32Array"],"mappings":";;;;;;;AAAAA,QACE,UACA,SAASC,GAGT,IAAIC,GAOJC,kBAA4B,SAASC,GAEnC,IAMIC,EAEAC,EAEAC,EAEAC,EAKAC,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EA7BAC,EAAWZ,EAAQa,OAEnBC,EAAgB,EAEhBC,EAAgBC,OAAOC,kBA4B3B,IAAKT,EAAI,EAAGC,EAAKG,EAAUJ,EAAIC,IAAMD,EAC/BR,EAAQQ,GAAKM,IACfA,EAAgBd,EAAQQ,IAEtBR,EAAQQ,GAAKO,IACfA,EAAgBf,EAAQQ,IAQ5B,IAJAP,EAAO,GAAKa,EACZZ,EAAQ,IAAsBgB,YAAqBjB,GAG9CE,EAAY,EAAGC,EAAO,EAAGC,EAAO,EAAGF,GAAaW,GAAgB,CACnE,IAAKN,EAAI,EAAGA,EAAII,IAAYJ,EAC1B,GAAIR,EAAQQ,KAAOL,EAAW,CAE5B,IAAKG,EAAW,EAAGC,EAAQH,EAAMM,EAAI,EAAGA,EAAIP,IAAaO,EACvDJ,EAAYA,GAAY,EAAc,EAARC,EAC9BA,IAAU,EAQZ,IADAI,EAASR,GAAa,GAAMK,EACvBE,EAAIJ,EAAUI,EAAIT,EAAMS,GAAKL,EAChCH,EAAMQ,GAAKC,IAGXP,IAKJD,EACFC,IAAS,EACTC,IAAS,EAGX,OAAQH,EAAOY,EAAeC,KAGhC,OAAOlB,EAAKC,QAAUA","file":"../huffman.js","sourcesContent":["define([\n  \"./zlib\"\n],function(Zlib) {\n  const USE_TYPEDARRAY = true;\n\n  var Huffman = {};\n\n  /**\n   * build huffman table from length list.\n   * @param {!(Array.<number>|Uint8Array)} lengths length list.\n   * @return {!Array} huffman table.\n   */\n  Huffman.buildHuffmanTable = function(lengths) {\n    /** @type {number} length list size. */\n    var listSize = lengths.length;\n    /** @type {number} max code length for table size. */\n    var maxCodeLength = 0;\n    /** @type {number} min code length for table size. */\n    var minCodeLength = Number.POSITIVE_INFINITY;\n    /** @type {number} table size. */\n    var size;\n    /** @type {!(Array|Uint8Array)} huffman code table. */\n    var table;\n    /** @type {number} bit length. */\n    var bitLength;\n    /** @type {number} huffman code. */\n    var code;\n    /**\n     * サイズが 2^maxlength 個のテーブルを埋めるためのスキップ長.\n     * @type {number} skip length for table filling.\n     */\n    var skip;\n    /** @type {number} reversed code. */\n    var reversed;\n    /** @type {number} reverse temp. */\n    var rtemp;\n    /** @type {number} loop counter. */\n    var i;\n    /** @type {number} loop limit. */\n    var il;\n    /** @type {number} loop counter. */\n    var j;\n    /** @type {number} table value. */\n    var value;\n\n    // Math.max は遅いので最長の値は for-loop で取得する\n    for (i = 0, il = listSize; i < il; ++i) {\n      if (lengths[i] > maxCodeLength) {\n        maxCodeLength = lengths[i];\n      }\n      if (lengths[i] < minCodeLength) {\n        minCodeLength = lengths[i];\n      }\n    }\n\n    size = 1 << maxCodeLength;\n    table = new (USE_TYPEDARRAY ? Uint32Array : Array)(size);\n\n    // ビット長の短い順からハフマン符号を割り当てる\n    for (bitLength = 1, code = 0, skip = 2; bitLength <= maxCodeLength;) {\n      for (i = 0; i < listSize; ++i) {\n        if (lengths[i] === bitLength) {\n          // ビットオーダーが逆になるためビット長分並びを反転する\n          for (reversed = 0, rtemp = code, j = 0; j < bitLength; ++j) {\n            reversed = (reversed << 1) | (rtemp & 1);\n            rtemp >>= 1;\n          }\n\n          // 最大ビット長をもとにテーブルを作るため、\n          // 最大ビット長以外では 0 / 1 どちらでも良い箇所ができる\n          // そのどちらでも良い場所は同じ値で埋めることで\n          // 本来のビット長以上のビット数取得しても問題が起こらないようにする\n          value = (bitLength << 16) | i;\n          for (j = reversed; j < size; j += skip) {\n            table[j] = value;\n          }\n\n          ++code;\n        }\n      }\n\n      // 次のビット長へ\n      ++bitLength;\n      code <<= 1;\n      skip <<= 1;\n    }\n\n    return [table, maxCodeLength, minCodeLength];\n  };\n\n  return Zlib.Huffman = Huffman;\n});\n\n"]}