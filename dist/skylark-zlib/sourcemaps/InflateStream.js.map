{"version":3,"sources":["InflateStream.js"],"names":["define","Zlib","RawInflateStream","InflateStream","input","this","Uint8Array","ip","rawinflate","method","output","prototype","decompress","buffer","tmp","length","set","readHeader","subarray","cmf","flg","CompressionMethod","DEFLATE","Error"],"mappings":";;;;;;;AAAAA,QACE,SACA,sBACA,SAASC,EAAKC,GAOhB,IAAIC,EAAgB,SAASC,GAE3BC,KAAKD,WAAkB,IAAVA,EAAmB,IAAsBE,WAAwBF,EAE9EC,KAAKE,GAAK,EAEVF,KAAKG,WAAa,IAAIN,EAAiBG,KAAKD,MAAOC,KAAKE,IAExDF,KAAKI,OAELJ,KAAKK,OAASL,KAAKG,WAAWE,QA0F9B,OAnFFP,EAAcQ,UAAUC,WAAa,SAASR,GAE5C,IAAIS,EAMJ,QAAc,IAAVT,EAAkB,CAElB,IAAIU,EAAM,IAAIR,WAAWD,KAAKD,MAAMW,OAASX,EAAMW,QACnDD,EAAIE,IAAIX,KAAKD,MAAO,GACpBU,EAAIE,IAAIZ,EAAOC,KAAKD,MAAMW,QAC1BV,KAAKD,MAAQU,EAMjB,YAAoB,IAAhBT,KAAKI,QACJJ,KAAKY,aAAe,EACd,IAAsBX,YAIjCO,EAASR,KAAKG,WAAWI,WAAWP,KAAKD,MAAOC,KAAKE,IAC1B,IAAvBF,KAAKG,WAAWD,KAClBF,KAAKD,MACHC,KAAKD,MAAMc,SAASb,KAAKG,WAAWD,IAEtCF,KAAKE,GAAK,GAgBLM,IAGTV,EAAcQ,UAAUM,WAAa,WACnC,IAAIV,EAAKF,KAAKE,GACVH,EAAQC,KAAKD,MAGbe,EAAMf,EAAMG,KACZa,EAAMhB,EAAMG,KAEhB,QAAY,IAARY,QAA0B,IAARC,EACpB,OAAQ,EAIV,OAAc,GAAND,GACN,KAAKlB,EAAKoB,kBAAkBC,QAC1BjB,KAAKI,OAASR,EAAKoB,kBAAkBC,QACrC,MACF,QACE,MAAM,IAAIC,MAAM,kCAIpB,KAAMJ,GAAO,GAAKC,GAAO,IAAO,EAC9B,MAAM,IAAIG,MAAM,yBAA2BJ,GAAO,GAAKC,GAAO,IAIhE,GAAU,GAANA,EACF,MAAM,IAAIG,MAAM,+BAGlBlB,KAAKE,GAAKA,GAGHN,EAAKE,cAAgBA","file":"../InflateStream.js","sourcesContent":["define([\r\n  \"./zlib\",\r\n  \"./RawInflateStream\"\r\n],function(Zlib,RawInflateStream) {\r\n  const USE_TYPEDARRAY = true;\r\n\r\n/**\r\n * @param {!(Uint8Array|Array)} input deflated buffer.\r\n * @constructor\r\n */\r\nvar InflateStream = function(input) {\r\n  /** @type {!(Uint8Array|Array)} */\r\n  this.input = input === void 0 ? new (USE_TYPEDARRAY ? Uint8Array : Array)() : input;\r\n  /** @type {number} */\r\n  this.ip = 0;\r\n  /** @type {RawInflateStream} */\r\n  this.rawinflate = new RawInflateStream(this.input, this.ip);\r\n  /** @type {Zlib.CompressionMethod} */\r\n  this.method;\r\n  /** @type {!(Array|Uint8Array)} */\r\n  this.output = this.rawinflate.output;\r\n};\r\n\r\n/**\r\n * decompress.\r\n * @return {!(Uint8Array|Array)} inflated buffer.\r\n */\r\nInflateStream.prototype.decompress = function(input) {\r\n  /** @type {!(Uint8Array|Array)} inflated buffer. */\r\n  var buffer;\r\n  /** @type {number} adler-32 checksum */\r\n  var adler32;\r\n\r\n  // 新しい入力を入力バッファに結合する\r\n  // XXX Array, Uint8Array のチェックを行うか確認する\r\n  if (input !== void 0) {\r\n    if (USE_TYPEDARRAY) {\r\n      var tmp = new Uint8Array(this.input.length + input.length);\r\n      tmp.set(this.input, 0);\r\n      tmp.set(input, this.input.length);\r\n      this.input = tmp;\r\n    } else {\r\n      this.input = this.input.concat(input);\r\n    }\r\n  }\r\n\r\n  if (this.method === void 0) {\r\n    if(this.readHeader() < 0) {\r\n      return new (USE_TYPEDARRAY ? Uint8Array : Array)();\r\n    }\r\n  }\r\n\r\n  buffer = this.rawinflate.decompress(this.input, this.ip);\r\n  if (this.rawinflate.ip !== 0) {\r\n    this.input = USE_TYPEDARRAY ?\r\n      this.input.subarray(this.rawinflate.ip) :\r\n      this.input.slice(this.rawinflate.ip);\r\n    this.ip = 0;\r\n  }\r\n\r\n  // verify adler-32\r\n  /*\r\n  if (this.verify) {\r\n    adler32 =\r\n      input[this.ip++] << 24 | input[this.ip++] << 16 |\r\n      input[this.ip++] << 8 | input[this.ip++];\r\n\r\n    if (adler32 !== Adler32(buffer)) {\r\n      throw new Error('invalid adler-32 checksum');\r\n    }\r\n  }\r\n  */\r\n\r\n  return buffer;\r\n};\r\n\r\nInflateStream.prototype.readHeader = function() {\r\n  var ip = this.ip;\r\n  var input = this.input;\r\n\r\n  // Compression Method and Flags\r\n  var cmf = input[ip++];\r\n  var flg = input[ip++];\r\n\r\n  if (cmf === void 0 || flg === void 0) {\r\n    return -1;\r\n  }\r\n\r\n  // compression method\r\n  switch (cmf & 0x0f) {\r\n    case Zlib.CompressionMethod.DEFLATE:\r\n      this.method = Zlib.CompressionMethod.DEFLATE;\r\n      break;\r\n    default:\r\n      throw new Error('unsupported compression method');\r\n  }\r\n\r\n  // fcheck\r\n  if (((cmf << 8) + flg) % 31 !== 0) {\r\n    throw new Error('invalid fcheck flag:' + ((cmf << 8) + flg) % 31);\r\n  }\r\n\r\n  // fdict (not supported)\r\n  if (flg & 0x20) {\r\n    throw new Error('fdict flag is not supported');\r\n  }\r\n\r\n  this.ip = ip;\r\n};  \r\n\r\n  return Zlib.InflateStream = InflateStream;\r\n});\r\n\r\n\r\n\r\n"]}