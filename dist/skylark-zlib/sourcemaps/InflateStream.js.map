{"version":3,"sources":["InflateStream.js"],"names":["define","Zlib","goog","provide","require","scope","InflateStream","input","this","USE_TYPEDARRAY","Uint8Array","Array","ip","rawinflate","RawInflateStream","method","output","prototype","decompress","buffer","tmp","length","set","concat","readHeader","subarray","slice","cmf","flg","CompressionMethod","DEFLATE","Error"],"mappings":";;;;;;;AAAAA,QACE,UACA,SAASC,MAGXC,KAAKC,QAAQ,sBAEbD,KAAKE,QAAQ,kBACbF,KAAKE,QAAQ,QAEbF,KAAKE,QAAQ,yBAEbF,KAAKG,MAAM,WAMXJ,KAAKK,cAAgB,SAASC,GAE5BC,KAAKD,WAAkB,IAAVA,EAAmB,IAAKE,eAAiBC,WAAaC,OAAWJ,EAE9EC,KAAKI,GAAK,EAEVJ,KAAKK,WAAa,IAAIZ,KAAKa,iBAAiBN,KAAKD,MAAOC,KAAKI,IAE7DJ,KAAKO,OAELP,KAAKQ,OAASR,KAAKK,WAAWG,QAOhCf,KAAKK,cAAcW,UAAUC,WAAa,SAASX,GAEjD,IAAIY,EAMJ,QAAc,IAAVZ,EACF,GAAIE,eAAgB,CAClB,IAAIW,EAAM,IAAIV,WAAWF,KAAKD,MAAMc,OAASd,EAAMc,QACnDD,EAAIE,IAAId,KAAKD,MAAO,GACpBa,EAAIE,IAAIf,EAAOC,KAAKD,MAAMc,QAC1Bb,KAAKD,MAAQa,OAEbZ,KAAKD,MAAQC,KAAKD,MAAMgB,OAAOhB,GAInC,YAAoB,IAAhBC,KAAKO,QACJP,KAAKgB,aAAe,EACd,IAAKf,eAAiBC,WAAaC,QAI9CQ,EAASX,KAAKK,WAAWK,WAAWV,KAAKD,MAAOC,KAAKI,IAC1B,IAAvBJ,KAAKK,WAAWD,KAClBJ,KAAKD,MAAQE,eACXD,KAAKD,MAAMkB,SAASjB,KAAKK,WAAWD,IACpCJ,KAAKD,MAAMmB,MAAMlB,KAAKK,WAAWD,IACnCJ,KAAKI,GAAK,GAgBLO,IAGTlB,KAAKK,cAAcW,UAAUO,WAAa,WACxC,IAAIZ,EAAKJ,KAAKI,GACVL,EAAQC,KAAKD,MAGboB,EAAMpB,EAAMK,KACZgB,EAAMrB,EAAMK,KAEhB,QAAY,IAARe,QAA0B,IAARC,EACpB,OAAQ,EAIV,OAAc,GAAND,GACN,KAAK1B,KAAK4B,kBAAkBC,QAC1BtB,KAAKO,OAASd,KAAK4B,kBAAkBC,QACrC,MACF,QACE,MAAM,IAAIC,MAAM,kCAIpB,KAAMJ,GAAO,GAAKC,GAAO,IAAO,EAC9B,MAAM,IAAIG,MAAM,yBAA2BJ,GAAO,GAAKC,GAAO,IAIhE,GAAU,GAANA,EACF,MAAM,IAAIG,MAAM,+BAGlBvB,KAAKI,GAAKA","file":"../InflateStream.js","sourcesContent":["define([\n  \"./zlib\"\n],function(Zlib) {\n  \n});\ngoog.provide('Zlib.InflateStream');\n\ngoog.require('USE_TYPEDARRAY');\ngoog.require('Zlib');\n//goog.require('Zlib.Adler32');\ngoog.require('Zlib.RawInflateStream');\n\ngoog.scope(function() {\n\n/**\n * @param {!(Uint8Array|Array)} input deflated buffer.\n * @constructor\n */\nZlib.InflateStream = function(input) {\n  /** @type {!(Uint8Array|Array)} */\n  this.input = input === void 0 ? new (USE_TYPEDARRAY ? Uint8Array : Array)() : input;\n  /** @type {number} */\n  this.ip = 0;\n  /** @type {Zlib.RawInflateStream} */\n  this.rawinflate = new Zlib.RawInflateStream(this.input, this.ip);\n  /** @type {Zlib.CompressionMethod} */\n  this.method;\n  /** @type {!(Array|Uint8Array)} */\n  this.output = this.rawinflate.output;\n};\n\n/**\n * decompress.\n * @return {!(Uint8Array|Array)} inflated buffer.\n */\nZlib.InflateStream.prototype.decompress = function(input) {\n  /** @type {!(Uint8Array|Array)} inflated buffer. */\n  var buffer;\n  /** @type {number} adler-32 checksum */\n  var adler32;\n\n  // 新しい入力を入力バッファに結合する\n  // XXX Array, Uint8Array のチェックを行うか確認する\n  if (input !== void 0) {\n    if (USE_TYPEDARRAY) {\n      var tmp = new Uint8Array(this.input.length + input.length);\n      tmp.set(this.input, 0);\n      tmp.set(input, this.input.length);\n      this.input = tmp;\n    } else {\n      this.input = this.input.concat(input);\n    }\n  }\n\n  if (this.method === void 0) {\n    if(this.readHeader() < 0) {\n      return new (USE_TYPEDARRAY ? Uint8Array : Array)();\n    }\n  }\n\n  buffer = this.rawinflate.decompress(this.input, this.ip);\n  if (this.rawinflate.ip !== 0) {\n    this.input = USE_TYPEDARRAY ?\n      this.input.subarray(this.rawinflate.ip) :\n      this.input.slice(this.rawinflate.ip);\n    this.ip = 0;\n  }\n\n  // verify adler-32\n  /*\n  if (this.verify) {\n    adler32 =\n      input[this.ip++] << 24 | input[this.ip++] << 16 |\n      input[this.ip++] << 8 | input[this.ip++];\n\n    if (adler32 !== Zlib.Adler32(buffer)) {\n      throw new Error('invalid adler-32 checksum');\n    }\n  }\n  */\n\n  return buffer;\n};\n\nZlib.InflateStream.prototype.readHeader = function() {\n  var ip = this.ip;\n  var input = this.input;\n\n  // Compression Method and Flags\n  var cmf = input[ip++];\n  var flg = input[ip++];\n\n  if (cmf === void 0 || flg === void 0) {\n    return -1;\n  }\n\n  // compression method\n  switch (cmf & 0x0f) {\n    case Zlib.CompressionMethod.DEFLATE:\n      this.method = Zlib.CompressionMethod.DEFLATE;\n      break;\n    default:\n      throw new Error('unsupported compression method');\n  }\n\n  // fcheck\n  if (((cmf << 8) + flg) % 31 !== 0) {\n    throw new Error('invalid fcheck flag:' + ((cmf << 8) + flg) % 31);\n  }\n\n  // fdict (not supported)\n  if (flg & 0x20) {\n    throw new Error('fdict flag is not supported');\n  }\n\n  this.ip = ip;\n};\n\n// end of scope\n});\n\n/* vim:set expandtab ts=2 sw=2 tw=80: */\n"]}