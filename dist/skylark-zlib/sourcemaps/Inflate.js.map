{"version":3,"sources":["Inflate.js"],"names":["define","Zlib","Adler32","RawInflate","Inflate","input","opt_params","cmf","flg","this","ip","rawinflate","verify","CompressionMethod","DEFLATE","method","Error","index","bufferSize","bufferType","resize","BufferType","prototype","decompress","buffer"],"mappings":";;;;;;;AAAAA,QACE,SACA,YACA,gBACA,SACAC,EACAC,EACAC,GAcA,IAAIC,EAAU,SAASC,EAAOC,GAE5B,IAIIC,EAEAC,EA0BJ,OAvBAC,KAAKJ,MAAQA,EAEbI,KAAKC,GAAK,EAEVD,KAAKE,WAELF,KAAKG,QAGDN,IAAgBA,QACdA,EAAkB,QACpBG,KAAKC,GAAKJ,EAAkB,OAE1BA,EAAmB,SACrBG,KAAKG,OAASN,EAAmB,SAKrCC,EAAMF,EAAMI,KAAKC,MACjBF,EAAMH,EAAMI,KAAKC,MAGH,GAANH,GACN,KAAKN,EAAKY,kBAAkBC,QAC1BL,KAAKM,OAASd,EAAKY,kBAAkBC,QACrC,MACF,QACE,MAAM,IAAIE,MAAM,kCAIpB,KAAMT,GAAO,GAAKC,GAAO,IAAO,EAC9B,MAAM,IAAIQ,MAAM,yBAA2BT,GAAO,GAAKC,GAAO,IAIhE,GAAU,GAANA,EACF,MAAM,IAAIQ,MAAM,+BAIlBP,KAAKE,WAAa,IAAIR,EAAWE,GAC/BY,MAASR,KAAKC,GACdQ,WAAcZ,EAAuB,WACrCa,WAAcb,EAAuB,WACrCc,OAAUd,EAAmB,UAuCjC,OAhCAF,EAAQiB,WAAalB,EAAWkB,WAMhCjB,EAAQkB,UAAUC,WAAa,WAE7B,IAEIC,EAFAnB,EAAQI,KAAKJ,MAUjB,GAJAmB,EAASf,KAAKE,WAAWY,aACzBd,KAAKC,GAAKD,KAAKE,WAAWD,GAGtBD,KAAKG,SAELP,EAAMI,KAAKC,OAAS,GAAKL,EAAMI,KAAKC,OAAS,GAC7CL,EAAMI,KAAKC,OAAS,EAAIL,EAAMI,KAAKC,SAC/B,IAEUR,EAAQsB,GACtB,MAAM,IAAIR,MAAM,6BAIpB,OAAOQ,GAGFvB,EAAKG,QAAUA","file":"../Inflate.js","sourcesContent":["define([\r\n  \"./zlib\",\r\n  \"./adler32\",\r\n  \"./RawInflate\"\r\n],function(\r\n  Zlib,\r\n  Adler32,\r\n  RawInflate\r\n) {\r\n  /**\r\n   * @constructor\r\n   * @param {!(Uint8Array|Array)} input deflated buffer.\r\n   * @param {Object=} opt_params option parameters.\r\n   *\r\n   * opt_params は以下のプロパティを指定する事ができます。\r\n   *   - index: input buffer の deflate コンテナの開始位置.\r\n   *   - blockSize: バッファのブロックサイズ.\r\n   *   - verify: 伸張が終わった後 adler-32 checksum の検証を行うか.\r\n   *   - bufferType: Inflate.BufferType の値によってバッファの管理方法を指定する.\r\n   *       Inflate.BufferType は RawInflate.BufferType のエイリアス.\r\n   */\r\n  var Inflate = function(input, opt_params) {\r\n    /** @type {number} */\r\n    var bufferSize;\r\n    /** @type {Inflate.BufferType} */\r\n    var bufferType;\r\n    /** @type {number} */\r\n    var cmf;\r\n    /** @type {number} */\r\n    var flg;\r\n\r\n    /** @type {!(Uint8Array|Array)} */\r\n    this.input = input;\r\n    /** @type {number} */\r\n    this.ip = 0;\r\n    /** @type {RawInflate} */\r\n    this.rawinflate;\r\n    /** @type {(boolean|undefined)} verify flag. */\r\n    this.verify;\r\n\r\n    // option parameters\r\n    if (opt_params || !(opt_params = {})) {\r\n      if (opt_params['index']) {\r\n        this.ip = opt_params['index'];\r\n      }\r\n      if (opt_params['verify']) {\r\n        this.verify = opt_params['verify'];\r\n      }\r\n    }\r\n\r\n    // Compression Method and Flags\r\n    cmf = input[this.ip++];\r\n    flg = input[this.ip++];\r\n\r\n    // compression method\r\n    switch (cmf & 0x0f) {\r\n      case Zlib.CompressionMethod.DEFLATE:\r\n        this.method = Zlib.CompressionMethod.DEFLATE;\r\n        break;\r\n      default:\r\n        throw new Error('unsupported compression method');\r\n    }\r\n\r\n    // fcheck\r\n    if (((cmf << 8) + flg) % 31 !== 0) {\r\n      throw new Error('invalid fcheck flag:' + ((cmf << 8) + flg) % 31);\r\n    }\r\n\r\n    // fdict (not supported)\r\n    if (flg & 0x20) {\r\n      throw new Error('fdict flag is not supported');\r\n    }\r\n\r\n    // RawInflate\r\n    this.rawinflate = new RawInflate(input, {\r\n      'index': this.ip,\r\n      'bufferSize': opt_params['bufferSize'],\r\n      'bufferType': opt_params['bufferType'],\r\n      'resize': opt_params['resize']\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @enum {number}\r\n   */\r\n  Inflate.BufferType = RawInflate.BufferType;\r\n\r\n  /**\r\n   * decompress.\r\n   * @return {!(Uint8Array|Array)} inflated buffer.\r\n   */\r\n  Inflate.prototype.decompress = function() {\r\n    /** @type {!(Array|Uint8Array)} input buffer. */\r\n    var input = this.input;\r\n    /** @type {!(Uint8Array|Array)} inflated buffer. */\r\n    var buffer;\r\n    /** @type {number} adler-32 checksum */\r\n    var adler32;\r\n\r\n    buffer = this.rawinflate.decompress();\r\n    this.ip = this.rawinflate.ip;\r\n\r\n    // verify adler-32\r\n    if (this.verify) {\r\n      adler32 = (\r\n        input[this.ip++] << 24 | input[this.ip++] << 16 |\r\n        input[this.ip++] << 8 | input[this.ip++]\r\n      ) >>> 0;\r\n\r\n      if (adler32 !== Adler32(buffer)) {\r\n        throw new Error('invalid adler-32 checksum');\r\n      }\r\n    }\r\n\r\n    return buffer;\r\n  };\r\n\r\n  return Zlib.Inflate = Inflate;\r\n});\r\n"]}