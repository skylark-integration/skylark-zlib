{"version":3,"sources":["Inflate.js"],"names":["define","Zlib","Inflate","input","opt_params","cmf","flg","this","ip","rawinflate","verify","CompressionMethod","DEFLATE","method","Error","RawInflate","index","bufferSize","bufferType","resize","BufferType","prototype","decompress","buffer","Adler32"],"mappings":";;;;;;;AAAAA,QACE,UACA,SAASC,GAaT,IAAIC,EAAU,SAASC,EAAOC,GAE5B,IAIIC,EAEAC,EA0BJ,OAvBAC,KAAKJ,MAAQA,EAEbI,KAAKC,GAAK,EAEVD,KAAKE,WAELF,KAAKG,QAGDN,IAAgBA,QACdA,EAAkB,QACpBG,KAAKC,GAAKJ,EAAkB,OAE1BA,EAAmB,SACrBG,KAAKG,OAASN,EAAmB,SAKrCC,EAAMF,EAAMI,KAAKC,MACjBF,EAAMH,EAAMI,KAAKC,MAGH,GAANH,GACN,KAAKJ,EAAKU,kBAAkBC,QAC1BL,KAAKM,OAASZ,EAAKU,kBAAkBC,QACrC,MACF,QACE,MAAM,IAAIE,MAAM,kCAIpB,KAAMT,GAAO,GAAKC,GAAO,IAAO,EAC9B,MAAM,IAAIQ,MAAM,yBAA2BT,GAAO,GAAKC,GAAO,IAIhE,GAAU,GAANA,EACF,MAAM,IAAIQ,MAAM,+BAIlBP,KAAKE,WAAa,IAAIM,WAAWZ,GAC/Ba,MAAST,KAAKC,GACdS,WAAcb,EAAuB,WACrCc,WAAcd,EAAuB,WACrCe,OAAUf,EAAmB,UAuCjC,OAhCAF,EAAQkB,WAAaL,WAAWK,WAMhClB,EAAQmB,UAAUC,WAAa,WAE7B,IAEIC,EAFApB,EAAQI,KAAKJ,MAUjB,GAJAoB,EAAShB,KAAKE,WAAWa,aACzBf,KAAKC,GAAKD,KAAKE,WAAWD,GAGtBD,KAAKG,SAELP,EAAMI,KAAKC,OAAS,GAAKL,EAAMI,KAAKC,OAAS,GAC7CL,EAAMI,KAAKC,OAAS,EAAIL,EAAMI,KAAKC,SAC/B,IAEUgB,QAAQD,GACtB,MAAM,IAAIT,MAAM,6BAIpB,OAAOS,GAGFtB,EAAKC,QAAUA","file":"../Inflate.js","sourcesContent":["define([\n  \"./zlib\"\n],function(Zlib) {\n  /**\n   * @constructor\n   * @param {!(Uint8Array|Array)} input deflated buffer.\n   * @param {Object=} opt_params option parameters.\n   *\n   * opt_params は以下のプロパティを指定する事ができます。\n   *   - index: input buffer の deflate コンテナの開始位置.\n   *   - blockSize: バッファのブロックサイズ.\n   *   - verify: 伸張が終わった後 adler-32 checksum の検証を行うか.\n   *   - bufferType: Inflate.BufferType の値によってバッファの管理方法を指定する.\n   *       Inflate.BufferType は RawInflate.BufferType のエイリアス.\n   */\n  var Inflate = function(input, opt_params) {\n    /** @type {number} */\n    var bufferSize;\n    /** @type {Inflate.BufferType} */\n    var bufferType;\n    /** @type {number} */\n    var cmf;\n    /** @type {number} */\n    var flg;\n\n    /** @type {!(Uint8Array|Array)} */\n    this.input = input;\n    /** @type {number} */\n    this.ip = 0;\n    /** @type {RawInflate} */\n    this.rawinflate;\n    /** @type {(boolean|undefined)} verify flag. */\n    this.verify;\n\n    // option parameters\n    if (opt_params || !(opt_params = {})) {\n      if (opt_params['index']) {\n        this.ip = opt_params['index'];\n      }\n      if (opt_params['verify']) {\n        this.verify = opt_params['verify'];\n      }\n    }\n\n    // Compression Method and Flags\n    cmf = input[this.ip++];\n    flg = input[this.ip++];\n\n    // compression method\n    switch (cmf & 0x0f) {\n      case Zlib.CompressionMethod.DEFLATE:\n        this.method = Zlib.CompressionMethod.DEFLATE;\n        break;\n      default:\n        throw new Error('unsupported compression method');\n    }\n\n    // fcheck\n    if (((cmf << 8) + flg) % 31 !== 0) {\n      throw new Error('invalid fcheck flag:' + ((cmf << 8) + flg) % 31);\n    }\n\n    // fdict (not supported)\n    if (flg & 0x20) {\n      throw new Error('fdict flag is not supported');\n    }\n\n    // RawInflate\n    this.rawinflate = new RawInflate(input, {\n      'index': this.ip,\n      'bufferSize': opt_params['bufferSize'],\n      'bufferType': opt_params['bufferType'],\n      'resize': opt_params['resize']\n    });\n  }\n\n  /**\n   * @enum {number}\n   */\n  Inflate.BufferType = RawInflate.BufferType;\n\n  /**\n   * decompress.\n   * @return {!(Uint8Array|Array)} inflated buffer.\n   */\n  Inflate.prototype.decompress = function() {\n    /** @type {!(Array|Uint8Array)} input buffer. */\n    var input = this.input;\n    /** @type {!(Uint8Array|Array)} inflated buffer. */\n    var buffer;\n    /** @type {number} adler-32 checksum */\n    var adler32;\n\n    buffer = this.rawinflate.decompress();\n    this.ip = this.rawinflate.ip;\n\n    // verify adler-32\n    if (this.verify) {\n      adler32 = (\n        input[this.ip++] << 24 | input[this.ip++] << 16 |\n        input[this.ip++] << 8 | input[this.ip++]\n      ) >>> 0;\n\n      if (adler32 !== Adler32(buffer)) {\n        throw new Error('invalid adler-32 checksum');\n      }\n    }\n\n    return buffer;\n  };\n\n  return Zlib.Inflate = Inflate;\n});\n"]}