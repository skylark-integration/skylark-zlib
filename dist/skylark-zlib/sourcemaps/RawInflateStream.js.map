{"version":3,"sources":["RawInflateStream.js"],"names":["define","Zlib","Huffman","USE_TYPEDARRAY","table","buildHuffmanTable","RawInflateStream","input","ip","opt_buffersize","this","blocks","bufferSize","totalpos","bitsbuf","bitsbuflen","Uint8Array","output","Array","op","bfinal","blockLength","resize","litlenTable","distTable","sp","status","Status","INITIALIZED","ip_","bitsbuflen_","bitsbuf_","BlockType","UNCOMPRESSED","FIXED","DYNAMIC","BLOCK_HEADER_START","BLOCK_HEADER_END","BLOCK_BODY_START","BLOCK_BODY_END","DECODE_BLOCK_START","DECODE_BLOCK_END","prototype","decompress","newInput","stop","readBlockHeader","currentBlockType","readUncompressedBlockHeader","parseFixedHuffmanBlock","parseDynamicHuffmanBlock","parseUncompressedBlock","decodeHuffman","concatBuffer","MaxBackwardLength","MaxCopyLength","Order","Uint16Array","LengthCodeTable","LengthExtraTable","DistCodeTable","DistExtraTable","FixedLiteralLengthTable","i","il","lengths","length","FixedDistanceTable","hdr","save_","readBits","restore_","Error","octet","readCodeByTable","codeWithLength","codeLength","codeTable","maxCodeLength","len","expandBuffer","fixRatio","hlit","hdist","hclen","codeLengthsTable","codeLengths","bits","code","repeat","lengthTable","prev","subarray","slice","call","e","ti","codeDist","litlen","dist","olength","opt_param","buffer","newSize","maxInflateSize","ratio","addRatio","set","tmp"],"mappings":"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","file":"../RawInflateStream.js","sourcesContent":["define([\r\n  \"./zlib\",\r\n  \"./huffman\"\r\n],function(Zlib,Huffman) {\r\n  const USE_TYPEDARRAY = true;\r\n\r\n  //-----------------------------------------------------------------------------\r\n\r\n  /** @define {number} buffer block size. */\r\n  var ZLIB_STREAM_RAW_INFLATE_BUFFER_SIZE = 0x8000;\r\n\r\n  //-----------------------------------------------------------------------------\r\n\r\n  var buildHuffmanTable = Huffman.buildHuffmanTable;\r\n\r\n  /**\r\n   * @param {!(Uint8Array|Array.<number>)} input input buffer.\r\n   * @param {number} ip input buffer pointer.\r\n   * @param {number=} opt_buffersize buffer block size.\r\n   * @constructor\r\n   */\r\n  var RawInflateStream = function(input, ip, opt_buffersize) {\r\n    /** @type {!Array.<(Array|Uint8Array)>} */\r\n    this.blocks = [];\r\n    /** @type {number} block size. */\r\n    this.bufferSize =\r\n      opt_buffersize ? opt_buffersize : ZLIB_STREAM_RAW_INFLATE_BUFFER_SIZE;\r\n    /** @type {!number} total output buffer pointer. */\r\n    this.totalpos = 0;\r\n    /** @type {!number} input buffer pointer. */\r\n    this.ip = ip === void 0 ? 0 : ip;\r\n    /** @type {!number} bit stream reader buffer. */\r\n    this.bitsbuf = 0;\r\n    /** @type {!number} bit stream reader buffer size. */\r\n    this.bitsbuflen = 0;\r\n    /** @type {!(Array|Uint8Array)} input buffer. */\r\n    this.input = USE_TYPEDARRAY ? new Uint8Array(input) : input;\r\n    /** @type {!(Uint8Array|Array)} output buffer. */\r\n    this.output = new (USE_TYPEDARRAY ? Uint8Array : Array)(this.bufferSize);\r\n    /** @type {!number} output buffer pointer. */\r\n    this.op = 0;\r\n    /** @type {boolean} is final block flag. */\r\n    this.bfinal = false;\r\n    /** @type {number} uncompressed block length. */\r\n    this.blockLength;\r\n    /** @type {boolean} resize flag for memory size optimization. */\r\n    this.resize = false;\r\n    /** @type {Array} */\r\n    this.litlenTable;\r\n    /** @type {Array} */\r\n    this.distTable;\r\n    /** @type {number} */\r\n    this.sp = 0; // stream pointer\r\n    /** @type {RawInflateStream.Status} */\r\n    this.status = RawInflateStream.Status.INITIALIZED;\r\n\r\n    //\r\n    // backup\r\n    //\r\n    /** @type {!number} */\r\n    this.ip_;\r\n    /** @type {!number} */\r\n    this.bitsbuflen_;\r\n    /** @type {!number} */\r\n    this.bitsbuf_;\r\n  };\r\n\r\n  /**\r\n   * @enum {number}\r\n   */\r\n  RawInflateStream.BlockType = {\r\n    UNCOMPRESSED: 0,\r\n    FIXED: 1,\r\n    DYNAMIC: 2\r\n  };\r\n\r\n  /**\r\n   * @enum {number}\r\n   */\r\n  RawInflateStream.Status = {\r\n    INITIALIZED: 0,\r\n    BLOCK_HEADER_START: 1,\r\n    BLOCK_HEADER_END: 2,\r\n    BLOCK_BODY_START: 3,\r\n    BLOCK_BODY_END: 4,\r\n    DECODE_BLOCK_START: 5,\r\n    DECODE_BLOCK_END: 6\r\n  };\r\n\r\n  /**\r\n   * decompress.\r\n   * @return {!(Uint8Array|Array)} inflated buffer.\r\n   */\r\n  RawInflateStream.prototype.decompress = function(newInput, ip) {\r\n    /** @type {boolean} */\r\n    var stop = false;\r\n\r\n    if (newInput !== void 0) {\r\n      this.input = newInput;\r\n    }\r\n\r\n    if (ip !== void 0) {\r\n      this.ip = ip;\r\n    }\r\n\r\n    // decompress\r\n    while (!stop) {\r\n      switch (this.status) {\r\n        // block header\r\n        case RawInflateStream.Status.INITIALIZED:\r\n        case RawInflateStream.Status.BLOCK_HEADER_START:\r\n          if (this.readBlockHeader() < 0) {\r\n            stop = true;\r\n          }\r\n          break;\r\n        // block body\r\n        case RawInflateStream.Status.BLOCK_HEADER_END: /* FALLTHROUGH */\r\n        case RawInflateStream.Status.BLOCK_BODY_START:\r\n          switch(this.currentBlockType) {\r\n            case RawInflateStream.BlockType.UNCOMPRESSED:\r\n              if (this.readUncompressedBlockHeader() < 0) {\r\n                stop = true;\r\n              }\r\n              break;\r\n            case RawInflateStream.BlockType.FIXED:\r\n              if (this.parseFixedHuffmanBlock() < 0) {\r\n                stop = true;\r\n              }\r\n              break;\r\n            case RawInflateStream.BlockType.DYNAMIC:\r\n              if (this.parseDynamicHuffmanBlock() < 0) {\r\n                stop = true;\r\n              }\r\n              break;\r\n          }\r\n          break;\r\n        // decode data\r\n        case RawInflateStream.Status.BLOCK_BODY_END:\r\n        case RawInflateStream.Status.DECODE_BLOCK_START:\r\n          switch(this.currentBlockType) {\r\n            case RawInflateStream.BlockType.UNCOMPRESSED:\r\n              if (this.parseUncompressedBlock() < 0) {\r\n                stop = true;\r\n              }\r\n              break;\r\n            case RawInflateStream.BlockType.FIXED: /* FALLTHROUGH */\r\n            case RawInflateStream.BlockType.DYNAMIC:\r\n              if (this.decodeHuffman() < 0) {\r\n                stop = true;\r\n              }\r\n              break;\r\n          }\r\n          break;\r\n        case RawInflateStream.Status.DECODE_BLOCK_END:\r\n          if (this.bfinal) {\r\n            stop = true;\r\n          } else {\r\n            this.status = RawInflateStream.Status.INITIALIZED;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    return this.concatBuffer();\r\n  };\r\n\r\n  /**\r\n   * @const\r\n   * @type {number} max backward length for LZ77.\r\n   */\r\n  RawInflateStream.MaxBackwardLength = 32768;\r\n\r\n  /**\r\n   * @const\r\n   * @type {number} max copy length for LZ77.\r\n   */\r\n  RawInflateStream.MaxCopyLength = 258;\r\n\r\n  /**\r\n   * huffman order\r\n   * @const\r\n   * @type {!(Array.<number>|Uint8Array)}\r\n   */\r\n  RawInflateStream.Order = (function(table) {\r\n    return USE_TYPEDARRAY ? new Uint16Array(table) : table;\r\n  })([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\r\n\r\n  /**\r\n   * huffman length code table.\r\n   * @const\r\n   * @type {!(Array.<number>|Uint16Array)}\r\n   */\r\n  RawInflateStream.LengthCodeTable = (function(table) {\r\n    return USE_TYPEDARRAY ? new Uint16Array(table) : table;\r\n  })([\r\n    0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000a, 0x000b,\r\n    0x000d, 0x000f, 0x0011, 0x0013, 0x0017, 0x001b, 0x001f, 0x0023, 0x002b,\r\n    0x0033, 0x003b, 0x0043, 0x0053, 0x0063, 0x0073, 0x0083, 0x00a3, 0x00c3,\r\n    0x00e3, 0x0102, 0x0102, 0x0102\r\n  ]);\r\n\r\n  /**\r\n   * huffman length extra-bits table.\r\n   * @const\r\n   * @type {!(Array.<number>|Uint8Array)}\r\n   */\r\n  RawInflateStream.LengthExtraTable = (function(table) {\r\n    return USE_TYPEDARRAY ? new Uint8Array(table) : table;\r\n  })([\r\n    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5,\r\n    5, 5, 0, 0, 0\r\n  ]);\r\n\r\n  /**\r\n   * huffman dist code table.\r\n   * @const\r\n   * @type {!(Array.<number>|Uint16Array)}\r\n   */\r\n  RawInflateStream.DistCodeTable = (function(table) {\r\n    return USE_TYPEDARRAY ? new Uint16Array(table) : table;\r\n  })([\r\n    0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0007, 0x0009, 0x000d, 0x0011,\r\n    0x0019, 0x0021, 0x0031, 0x0041, 0x0061, 0x0081, 0x00c1, 0x0101, 0x0181,\r\n    0x0201, 0x0301, 0x0401, 0x0601, 0x0801, 0x0c01, 0x1001, 0x1801, 0x2001,\r\n    0x3001, 0x4001, 0x6001\r\n  ]);\r\n\r\n  /**\r\n   * huffman dist extra-bits table.\r\n   * @const\r\n   * @type {!(Array.<number>|Uint8Array)}\r\n   */\r\n  RawInflateStream.DistExtraTable = (function(table) {\r\n    return USE_TYPEDARRAY ? new Uint8Array(table) : table;\r\n  })([\r\n    0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11,\r\n    11, 12, 12, 13, 13\r\n  ]);\r\n\r\n  /**\r\n   * fixed huffman length code table\r\n   * @const\r\n   * @type {!Array}\r\n   */\r\n  RawInflateStream.FixedLiteralLengthTable = (function(table) {\r\n    return table;\r\n  })((function() {\r\n    var lengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(288);\r\n    var i, il;\r\n\r\n    for (i = 0, il = lengths.length; i < il; ++i) {\r\n      lengths[i] =\r\n        (i <= 143) ? 8 :\r\n        (i <= 255) ? 9 :\r\n        (i <= 279) ? 7 :\r\n        8;\r\n    }\r\n\r\n    return buildHuffmanTable(lengths);\r\n  })());\r\n\r\n  /**\r\n   * fixed huffman distance code table\r\n   * @const\r\n   * @type {!Array}\r\n   */\r\n  RawInflateStream.FixedDistanceTable = (function(table) {\r\n    return table;\r\n  })((function() {\r\n    var lengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(30);\r\n    var i, il;\r\n\r\n    for (i = 0, il = lengths.length; i < il; ++i) {\r\n      lengths[i] = 5;\r\n    }\r\n\r\n    return buildHuffmanTable(lengths);\r\n  })());\r\n\r\n  /**\r\n   * parse deflated block.\r\n   */\r\n  RawInflateStream.prototype.readBlockHeader = function() {\r\n    /** @type {number} header */\r\n    var hdr;\r\n\r\n    this.status = RawInflateStream.Status.BLOCK_HEADER_START;\r\n\r\n    this.save_();\r\n    if ((hdr = this.readBits(3)) < 0) {\r\n      this.restore_();\r\n      return -1;\r\n    }\r\n\r\n    // BFINAL\r\n    if (hdr & 0x1) {\r\n      this.bfinal = true;\r\n    }\r\n\r\n    // BTYPE\r\n    hdr >>>= 1;\r\n    switch (hdr) {\r\n      case 0: // uncompressed\r\n        this.currentBlockType = RawInflateStream.BlockType.UNCOMPRESSED;\r\n        break;\r\n      case 1: // fixed huffman\r\n        this.currentBlockType = RawInflateStream.BlockType.FIXED;\r\n        break;\r\n      case 2: // dynamic huffman\r\n        this.currentBlockType = RawInflateStream.BlockType.DYNAMIC;\r\n        break;\r\n      default: // reserved or other\r\n        throw new Error('unknown BTYPE: ' + hdr);\r\n    }\r\n\r\n    this.status = RawInflateStream.Status.BLOCK_HEADER_END;\r\n  };\r\n\r\n  /**\r\n   * read inflate bits\r\n   * @param {number} length bits length.\r\n   * @return {number} read bits.\r\n   */\r\n  RawInflateStream.prototype.readBits = function(length) {\r\n    var bitsbuf = this.bitsbuf;\r\n    var bitsbuflen = this.bitsbuflen;\r\n    var input = this.input;\r\n    var ip = this.ip;\r\n\r\n    /** @type {number} input and output byte. */\r\n    var octet;\r\n\r\n    // not enough buffer\r\n    while (bitsbuflen < length) {\r\n      // input byte\r\n      if (input.length <= ip) {\r\n        return -1;\r\n      }\r\n      octet = input[ip++];\r\n\r\n      // concat octet\r\n      bitsbuf |= octet << bitsbuflen;\r\n      bitsbuflen += 8;\r\n    }\r\n\r\n    // output byte\r\n    octet = bitsbuf & /* MASK */ ((1 << length) - 1);\r\n    bitsbuf >>>= length;\r\n    bitsbuflen -= length;\r\n\r\n    this.bitsbuf = bitsbuf;\r\n    this.bitsbuflen = bitsbuflen;\r\n    this.ip = ip;\r\n\r\n    return octet;\r\n  };\r\n\r\n  /**\r\n   * read huffman code using table\r\n   * @param {Array} table huffman code table.\r\n   * @return {number} huffman code.\r\n   */\r\n  RawInflateStream.prototype.readCodeByTable = function(table) {\r\n    var bitsbuf = this.bitsbuf;\r\n    var bitsbuflen = this.bitsbuflen;\r\n    var input = this.input;\r\n    var ip = this.ip;\r\n\r\n    /** @type {!(Array|Uint8Array)} huffman code table */\r\n    var codeTable = table[0];\r\n    /** @type {number} */\r\n    var maxCodeLength = table[1];\r\n    /** @type {number} input byte */\r\n    var octet;\r\n    /** @type {number} code length & code (16bit, 16bit) */\r\n    var codeWithLength;\r\n    /** @type {number} code bits length */\r\n    var codeLength;\r\n\r\n    // not enough buffer\r\n    while (bitsbuflen < maxCodeLength) {\r\n      if (input.length <= ip) {\r\n        return -1;\r\n      }\r\n      octet = input[ip++];\r\n      bitsbuf |= octet << bitsbuflen;\r\n      bitsbuflen += 8;\r\n    }\r\n\r\n    // read max length\r\n    codeWithLength = codeTable[bitsbuf & ((1 << maxCodeLength) - 1)];\r\n    codeLength = codeWithLength >>> 16;\r\n\r\n    if (codeLength > bitsbuflen) {\r\n      throw new Error('invalid code length: ' + codeLength);\r\n    }\r\n\r\n    this.bitsbuf = bitsbuf >> codeLength;\r\n    this.bitsbuflen = bitsbuflen - codeLength;\r\n    this.ip = ip;\r\n\r\n    return codeWithLength & 0xffff;\r\n  };\r\n\r\n  /**\r\n   * read uncompressed block header\r\n   */\r\n  RawInflateStream.prototype.readUncompressedBlockHeader = function() {\r\n    /** @type {number} block length */\r\n    var len;\r\n    /** @type {number} number for check block length */\r\n    var nlen;\r\n\r\n    var input = this.input;\r\n    var ip = this.ip;\r\n\r\n    this.status = RawInflateStream.Status.BLOCK_BODY_START;\r\n\r\n    if (ip + 4 >= input.length) {\r\n      return -1;\r\n    }\r\n\r\n    len = input[ip++] | (input[ip++] << 8);\r\n    nlen = input[ip++] | (input[ip++] << 8);\r\n\r\n    // check len & nlen\r\n    if (len === ~nlen) {\r\n      throw new Error('invalid uncompressed block header: length verify');\r\n    }\r\n\r\n    // skip buffered header bits\r\n    this.bitsbuf = 0;\r\n    this.bitsbuflen = 0;\r\n\r\n    this.ip = ip;\r\n    this.blockLength = len;\r\n    this.status = RawInflateStream.Status.BLOCK_BODY_END;\r\n  };\r\n\r\n  /**\r\n   * parse uncompressed block.\r\n   */\r\n  RawInflateStream.prototype.parseUncompressedBlock = function() {\r\n    var input = this.input;\r\n    var ip = this.ip;\r\n    var output = this.output;\r\n    var op = this.op;\r\n    var len = this.blockLength;\r\n\r\n    this.status = RawInflateStream.Status.DECODE_BLOCK_START;\r\n\r\n    // copy\r\n    // XXX: とりあえず素直にコピー\r\n    while (len--) {\r\n      if (op === output.length) {\r\n        output = this.expandBuffer({fixRatio: 2});\r\n      }\r\n\r\n      // not enough input buffer\r\n      if (ip >= input.length) {\r\n        this.ip = ip;\r\n        this.op = op;\r\n        this.blockLength = len + 1; // コピーしてないので戻す\r\n        return -1;\r\n      }\r\n\r\n      output[op++] = input[ip++];\r\n    }\r\n\r\n    if (len < 0) {\r\n      this.status = RawInflateStream.Status.DECODE_BLOCK_END;\r\n    }\r\n\r\n    this.ip = ip;\r\n    this.op = op;\r\n\r\n    return 0;\r\n  };\r\n\r\n  /**\r\n   * parse fixed huffman block.\r\n   */\r\n  RawInflateStream.prototype.parseFixedHuffmanBlock = function() {\r\n    this.status = RawInflateStream.Status.BLOCK_BODY_START;\r\n\r\n    this.litlenTable = RawInflateStream.FixedLiteralLengthTable;\r\n    this.distTable = RawInflateStream.FixedDistanceTable;\r\n\r\n    this.status = RawInflateStream.Status.BLOCK_BODY_END;\r\n\r\n    return 0;\r\n  };\r\n\r\n  /**\r\n   * オブジェクトのコンテキストを別のプロパティに退避する.\r\n   * @private\r\n   */\r\n  RawInflateStream.prototype.save_ = function() {\r\n    this.ip_ = this.ip;\r\n    this.bitsbuflen_ = this.bitsbuflen;\r\n    this.bitsbuf_ = this.bitsbuf;\r\n  };\r\n\r\n  /**\r\n   * 別のプロパティに退避したコンテキストを復元する.\r\n   * @private\r\n   */\r\n  RawInflateStream.prototype.restore_ = function() {\r\n    this.ip = this.ip_;\r\n    this.bitsbuflen = this.bitsbuflen_;\r\n    this.bitsbuf = this.bitsbuf_;\r\n  };\r\n\r\n  /**\r\n   * parse dynamic huffman block.\r\n   */\r\n  RawInflateStream.prototype.parseDynamicHuffmanBlock = function() {\r\n    /** @type {number} number of literal and length codes. */\r\n    var hlit;\r\n    /** @type {number} number of distance codes. */\r\n    var hdist;\r\n    /** @type {number} number of code lengths. */\r\n    var hclen;\r\n    /** @type {!(Uint8Array|Array)} code lengths. */\r\n    var codeLengths =\r\n      new (USE_TYPEDARRAY ? Uint8Array : Array)(RawInflateStream.Order.length);\r\n    /** @type {!Array} code lengths table. */\r\n    var codeLengthsTable;\r\n    /** @type {!(Uint32Array|Array)} literal and length code lengths. */\r\n    var litlenLengths;\r\n    /** @type {!(Uint32Array|Array)} distance code lengths. */\r\n    var distLengths;\r\n\r\n    this.status = RawInflateStream.Status.BLOCK_BODY_START;\r\n\r\n    this.save_();\r\n    hlit = this.readBits(5) + 257;\r\n    hdist = this.readBits(5) + 1;\r\n    hclen = this.readBits(4) + 4;\r\n    if (hlit < 0 || hdist < 0 || hclen < 0) {\r\n      this.restore_();\r\n      return -1;\r\n    }\r\n\r\n    try {\r\n      parseDynamicHuffmanBlockImpl.call(this);\r\n    } catch(e) {\r\n      this.restore_();\r\n      return -1;\r\n    }\r\n\r\n    function parseDynamicHuffmanBlockImpl() {\r\n      /** @type {number} */\r\n      var bits;\r\n      var code;\r\n      var prev = 0;\r\n      var repeat;\r\n      /** @type {!(Uint8Array|Array.<number>)} code length table. */\r\n      var lengthTable;\r\n      /** @type {number} loop counter. */\r\n      var i;\r\n      /** @type {number} loop limit. */\r\n      var il;\r\n\r\n      // decode code lengths\r\n      for (i = 0; i < hclen; ++i) {\r\n        if ((bits = this.readBits(3)) < 0) {\r\n          throw new Error('not enough input');\r\n        }\r\n        codeLengths[RawInflateStream.Order[i]] = bits;\r\n      }\r\n\r\n      // decode length table\r\n      codeLengthsTable = buildHuffmanTable(codeLengths);\r\n      lengthTable = new (USE_TYPEDARRAY ? Uint8Array : Array)(hlit + hdist);\r\n      for (i = 0, il = hlit + hdist; i < il;) {\r\n        code = this.readCodeByTable(codeLengthsTable);\r\n        if (code < 0) {\r\n          throw new Error('not enough input');\r\n        }\r\n        switch (code) {\r\n          case 16:\r\n            if ((bits = this.readBits(2)) < 0) {\r\n              throw new Error('not enough input');\r\n            }\r\n            repeat = 3 + bits;\r\n            while (repeat--) { lengthTable[i++] = prev; }\r\n            break;\r\n          case 17:\r\n            if ((bits = this.readBits(3)) < 0) {\r\n              throw new Error('not enough input');\r\n            }\r\n            repeat = 3 + bits;\r\n            while (repeat--) { lengthTable[i++] = 0; }\r\n            prev = 0;\r\n            break;\r\n          case 18:\r\n            if ((bits = this.readBits(7)) < 0) {\r\n              throw new Error('not enough input');\r\n            }\r\n            repeat = 11 + bits;\r\n            while (repeat--) { lengthTable[i++] = 0; }\r\n            prev = 0;\r\n            break;\r\n          default:\r\n            lengthTable[i++] = code;\r\n            prev = code;\r\n            break;\r\n        }\r\n      }\r\n\r\n      // literal and length code\r\n      litlenLengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(hlit);\r\n\r\n      // distance code\r\n      distLengths = new (USE_TYPEDARRAY ? Uint8Array : Array)(hdist);\r\n\r\n      this.litlenTable = USE_TYPEDARRAY\r\n        ? buildHuffmanTable(lengthTable.subarray(0, hlit))\r\n        : buildHuffmanTable(lengthTable.slice(0, hlit));\r\n      this.distTable = USE_TYPEDARRAY\r\n        ? buildHuffmanTable(lengthTable.subarray(hlit))\r\n        : buildHuffmanTable(lengthTable.slice(hlit));\r\n    }\r\n\r\n    this.status = RawInflateStream.Status.BLOCK_BODY_END;\r\n\r\n    return 0;\r\n  };\r\n\r\n  /**\r\n   * decode huffman code (dynamic)\r\n   * @return {(number|undefined)} -1 is error.\r\n   */\r\n  RawInflateStream.prototype.decodeHuffman = function() {\r\n    var output = this.output;\r\n    var op = this.op;\r\n\r\n    /** @type {number} huffman code. */\r\n    var code;\r\n    /** @type {number} table index. */\r\n    var ti;\r\n    /** @type {number} huffman code distination. */\r\n    var codeDist;\r\n    /** @type {number} huffman code length. */\r\n    var codeLength;\r\n\r\n    var litlen = this.litlenTable;\r\n    var dist = this.distTable;\r\n\r\n    var olength = output.length;\r\n    var bits;\r\n\r\n    this.status = RawInflateStream.Status.DECODE_BLOCK_START;\r\n\r\n    while (true) {\r\n      this.save_();\r\n\r\n      code = this.readCodeByTable(litlen);\r\n      if (code < 0) {\r\n        this.op = op;\r\n        this.restore_();\r\n        return -1;\r\n      }\r\n\r\n      if (code === 256) {\r\n        break;\r\n      }\r\n\r\n      // literal\r\n      if (code < 256) {\r\n        if (op === olength) {\r\n          output = this.expandBuffer();\r\n          olength = output.length;\r\n        }\r\n        output[op++] = code;\r\n\r\n        continue;\r\n      }\r\n\r\n      // length code\r\n      ti = code - 257;\r\n      codeLength = RawInflateStream.LengthCodeTable[ti];\r\n      if (RawInflateStream.LengthExtraTable[ti] > 0) {\r\n        bits = this.readBits(RawInflateStream.LengthExtraTable[ti]);\r\n        if (bits < 0) {\r\n          this.op = op;\r\n          this.restore_();\r\n          return -1;\r\n        }\r\n        codeLength += bits;\r\n      }\r\n\r\n      // dist code\r\n      code = this.readCodeByTable(dist);\r\n      if (code < 0) {\r\n        this.op = op;\r\n        this.restore_();\r\n        return -1;\r\n      }\r\n      codeDist = RawInflateStream.DistCodeTable[code];\r\n      if (RawInflateStream.DistExtraTable[code] > 0) {\r\n        bits = this.readBits(RawInflateStream.DistExtraTable[code]);\r\n        if (bits < 0) {\r\n          this.op = op;\r\n          this.restore_();\r\n          return -1;\r\n        }\r\n        codeDist += bits;\r\n      }\r\n\r\n      // lz77 decode\r\n      if (op + codeLength >= olength) {\r\n        output = this.expandBuffer();\r\n        olength = output.length;\r\n      }\r\n\r\n      while (codeLength--) {\r\n        output[op] = output[(op++) - codeDist];\r\n      }\r\n\r\n      // break\r\n      if (this.ip === this.input.length) {\r\n        this.op = op;\r\n        return -1;\r\n      }\r\n    }\r\n\r\n    while (this.bitsbuflen >= 8) {\r\n      this.bitsbuflen -= 8;\r\n      this.ip--;\r\n    }\r\n\r\n    this.op = op;\r\n    this.status = RawInflateStream.Status.DECODE_BLOCK_END;\r\n  };\r\n\r\n  /**\r\n   * expand output buffer. (dynamic)\r\n   * @param {Object=} opt_param option parameters.\r\n   * @return {!(Array|Uint8Array)} output buffer pointer.\r\n   */\r\n  RawInflateStream.prototype.expandBuffer = function(opt_param) {\r\n    /** @type {!(Array|Uint8Array)} store buffer. */\r\n    var buffer;\r\n    /** @type {number} expantion ratio. */\r\n    var ratio = (this.input.length / this.ip + 1) | 0;\r\n    /** @type {number} maximum number of huffman code. */\r\n    var maxHuffCode;\r\n    /** @type {number} new output buffer size. */\r\n    var newSize;\r\n    /** @type {number} max inflate size. */\r\n    var maxInflateSize;\r\n\r\n    var input = this.input;\r\n    var output = this.output;\r\n\r\n    if (opt_param) {\r\n      if (typeof opt_param.fixRatio === 'number') {\r\n        ratio = opt_param.fixRatio;\r\n      }\r\n      if (typeof opt_param.addRatio === 'number') {\r\n        ratio += opt_param.addRatio;\r\n      }\r\n    }\r\n\r\n    // calculate new buffer size\r\n    if (ratio < 2) {\r\n      maxHuffCode =\r\n        (input.length - this.ip) / this.litlenTable[2];\r\n      maxInflateSize = (maxHuffCode / 2 * 258) | 0;\r\n      newSize = maxInflateSize < output.length ?\r\n        output.length + maxInflateSize :\r\n        output.length << 1;\r\n    } else {\r\n      newSize = output.length * ratio;\r\n    }\r\n\r\n    // buffer expantion\r\n    if (USE_TYPEDARRAY) {\r\n      buffer = new Uint8Array(newSize);\r\n      buffer.set(output);\r\n    } else {\r\n      buffer = output;\r\n    }\r\n\r\n    this.output = buffer;\r\n\r\n    return this.output;\r\n  };\r\n\r\n  /**\r\n   * concat output buffer. (dynamic)\r\n   * @return {!(Array|Uint8Array)} output buffer.\r\n   */\r\n  RawInflateStream.prototype.concatBuffer = function() {\r\n    /** @type {!(Array|Uint8Array)} output buffer. */\r\n    var buffer;\r\n    /** @type {number} */\r\n    var op = this.op;\r\n    /** @type {Uint8Array} */\r\n    var tmp;\r\n\r\n    if (this.resize) {\r\n      if (USE_TYPEDARRAY) {\r\n        buffer = new Uint8Array(this.output.subarray(this.sp, op));\r\n      } else {\r\n        buffer = this.output.slice(this.sp, op);\r\n      }\r\n    } else {\r\n      buffer =\r\n        USE_TYPEDARRAY ? this.output.subarray(this.sp, op) : this.output.slice(this.sp, op);\r\n    }\r\n\r\n    this.sp = op;\r\n\r\n    // compaction\r\n    if (op > RawInflateStream.MaxBackwardLength + this.bufferSize) {\r\n      this.op = this.sp = RawInflateStream.MaxBackwardLength;\r\n      if (USE_TYPEDARRAY) {\r\n        tmp = /** @type {Uint8Array} */(this.output);\r\n        this.output = new Uint8Array(this.bufferSize + RawInflateStream.MaxBackwardLength);\r\n        this.output.set(tmp.subarray(op - RawInflateStream.MaxBackwardLength, op));\r\n      } else {\r\n        this.output = this.output.slice(op - RawInflateStream.MaxBackwardLength);\r\n      }\r\n    }\r\n\r\n    return buffer;\r\n  };\r\n\r\n  return Zlib.RawInflateStream = RawInflateStream;\r\n  \r\n});\r\n\r\n\r\n"]}