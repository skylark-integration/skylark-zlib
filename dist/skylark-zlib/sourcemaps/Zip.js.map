{"version":3,"sources":["Zip.js"],"names":["define","Zlib","CRC32","RawDeflate","Zip","opt_params","this","files","comment","password","CompressionMethod","STORE","DEFLATE","OperatingSystem","MSDOS","UNIX","MACINTOSH","Flags","ENCRYPT","DESCRIPTOR","UTF8","FileHeaderSignature","LocalFileHeaderSignature","CentralDirectorySignature","prototype","addFile","input","compressed","size","length","crc32","Array","Uint8Array","calc","deflateWithOption","Error","push","buffer","option","encrypted","setPassword","compress","file","output","op1","op2","op3","endOfCentralDirectorySize","offset","needVersion","flags","compressionMethod","date","plainSize","filenameLength","extraFieldLength","commentLength","filename","extraField","tmp","key","i","il","j","jl","localFileSize","centralDirectorySize","createEncryptionKey","set","encode","Math","random","Date","getMinutes","getSeconds","getHours","getMonth","getDate","getFullYear","getByte","n","updateKeys","single","Uint32Array"],"mappings":"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","file":"../Zip.js","sourcesContent":["define([\r\n  \"./zlib\",\r\n  \"./crc32\",\r\n  \"./RawDeflate\"\r\n],function(Zlib,CRC32,RawDeflate) {\r\n  const USE_TYPEDARRAY = true;\r\n\r\n  /**\r\n   * @param {Object=} opt_params options.\r\n   * @constructor\r\n   */\r\n  Zip = function(opt_params) {\r\n    opt_params = opt_params || {};\r\n    /** @type {Array.<{\r\n     *   buffer: !(Array.<number>|Uint8Array),\r\n     *   option: Object,\r\n     *   compressed: boolean,\r\n     *   encrypted: boolean,\r\n     *   size: number,\r\n     *   crc32: number\r\n     * }>} */\r\n    this.files = [];\r\n    /** @type {(Array.<number>|Uint8Array)} */\r\n    this.comment = opt_params['comment'];\r\n    /** @type {(Array.<number>|Uint8Array)} */\r\n    this.password;\r\n  };\r\n\r\n\r\n  /**\r\n   * @enum {number}\r\n   */\r\n  Zip.CompressionMethod = {\r\n    STORE: 0,\r\n    DEFLATE: 8\r\n  };\r\n\r\n  /**\r\n   * @enum {number}\r\n   */\r\n  Zip.OperatingSystem = {\r\n    MSDOS: 0,\r\n    UNIX: 3,\r\n    MACINTOSH: 7\r\n  };\r\n\r\n  /**\r\n   * @enum {number}\r\n   */\r\n  Zip.Flags = {\r\n    ENCRYPT:    0x0001,\r\n    DESCRIPTOR: 0x0008,\r\n    UTF8:       0x0800\r\n  };\r\n\r\n  /**\r\n   * @type {Array.<number>}\r\n   * @const\r\n   */\r\n  Zip.FileHeaderSignature = [0x50, 0x4b, 0x01, 0x02];\r\n\r\n  /**\r\n   * @type {Array.<number>}\r\n   * @const\r\n   */\r\n  Zip.LocalFileHeaderSignature = [0x50, 0x4b, 0x03, 0x04];\r\n\r\n  /**\r\n   * @type {Array.<number>}\r\n   * @const\r\n   */\r\n  Zip.CentralDirectorySignature = [0x50, 0x4b, 0x05, 0x06];\r\n\r\n  /**\r\n   * @param {Array.<number>|Uint8Array} input\r\n   * @param {Object=} opt_params options.\r\n   */\r\n  Zip.prototype.addFile = function(input, opt_params) {\r\n    opt_params = opt_params || {};\r\n    /** @type {string} */\r\n    var filename = '' || opt_params['filename'];\r\n    /** @type {boolean} */\r\n    var compressed;\r\n    /** @type {number} */\r\n    var size = input.length;\r\n    /** @type {number} */\r\n    var crc32 = 0;\r\n\r\n    if (USE_TYPEDARRAY && input instanceof Array) {\r\n      input = new Uint8Array(input);\r\n    }\r\n\r\n    // default\r\n    if (typeof opt_params['compressionMethod'] !== 'number') {\r\n      opt_params['compressionMethod'] = Zip.CompressionMethod.DEFLATE;\r\n    }\r\n\r\n    // その場で圧縮する場合\r\n    if (opt_params['compress']) {\r\n      switch (opt_params['compressionMethod']) {\r\n        case Zip.CompressionMethod.STORE:\r\n          break;\r\n        case Zip.CompressionMethod.DEFLATE:\r\n          crc32 = CRC32.calc(input);\r\n          input = this.deflateWithOption(input, opt_params);\r\n          compressed = true;\r\n          break;\r\n        default:\r\n          throw new Error('unknown compression method:' + opt_params['compressionMethod']);\r\n      }\r\n    }\r\n\r\n    this.files.push({\r\n      buffer: input,\r\n      option: opt_params,\r\n      compressed: compressed,\r\n      encrypted: false,\r\n      size: size,\r\n      crc32: crc32\r\n    });\r\n  };\r\n\r\n  /**\r\n   * @param {(Array.<number>|Uint8Array)} password\r\n   */\r\n  Zip.prototype.setPassword = function(password) {\r\n    this.password = password;\r\n  };\r\n\r\n  Zip.prototype.compress = function() {\r\n    /** @type {Array.<{\r\n     *   buffer: !(Array.<number>|Uint8Array),\r\n     *   option: Object,\r\n     *   compressed: boolean,\r\n     *   encrypted: boolean,\r\n     *   size: number,\r\n     *   crc32: number\r\n     * }>} */\r\n    var files = this.files;\r\n    /** @type {{\r\n     *   buffer: !(Array.<number>|Uint8Array),\r\n     *   option: Object,\r\n     *   compressed: boolean,\r\n     *   encrypted: boolean,\r\n     *   size: number,\r\n     *   crc32: number\r\n     * }} */\r\n    var file;\r\n    /** @type {!(Array.<number>|Uint8Array)} */\r\n    var output;\r\n    /** @type {number} */\r\n    var op1;\r\n    /** @type {number} */\r\n    var op2;\r\n    /** @type {number} */\r\n    var op3;\r\n    /** @type {number} */\r\n    var localFileSize = 0;\r\n    /** @type {number} */\r\n    var centralDirectorySize = 0;\r\n    /** @type {number} */\r\n    var endOfCentralDirectorySize;\r\n    /** @type {number} */\r\n    var offset;\r\n    /** @type {number} */\r\n    var needVersion;\r\n    /** @type {number} */\r\n    var flags;\r\n    /** @type {Zip.CompressionMethod} */\r\n    var compressionMethod;\r\n    /** @type {Date} */\r\n    var date;\r\n    /** @type {number} */\r\n    var crc32;\r\n    /** @type {number} */\r\n    var size;\r\n    /** @type {number} */\r\n    var plainSize;\r\n    /** @type {number} */\r\n    var filenameLength;\r\n    /** @type {number} */\r\n    var extraFieldLength;\r\n    /** @type {number} */\r\n    var commentLength;\r\n    /** @type {(Array.<number>|Uint8Array)} */\r\n    var filename;\r\n    /** @type {(Array.<number>|Uint8Array)} */\r\n    var extraField;\r\n    /** @type {(Array.<number>|Uint8Array)} */\r\n    var comment;\r\n    /** @type {(Array.<number>|Uint8Array)} */\r\n    var buffer;\r\n    /** @type {*} */\r\n    var tmp;\r\n    /** @type {Array.<number>|Uint32Array|Object} */\r\n    var key;\r\n    /** @type {number} */\r\n    var i;\r\n    /** @type {number} */\r\n    var il;\r\n    /** @type {number} */\r\n    var j;\r\n    /** @type {number} */\r\n    var jl;\r\n\r\n    // ファイルの圧縮\r\n    for (i = 0, il = files.length; i < il; ++i) {\r\n      file = files[i];\r\n      filenameLength =\r\n        (file.option['filename']) ? file.option['filename'].length : 0;\r\n      extraFieldLength =\r\n        (file.option['extraField']) ? file.option['extraField'].length : 0;\r\n      commentLength =\r\n        (file.option['comment']) ? file.option['comment'].length : 0;\r\n\r\n      // 圧縮されていなかったら圧縮\r\n      if (!file.compressed) {\r\n        // 圧縮前に CRC32 の計算をしておく\r\n        file.crc32 = CRC32.calc(file.buffer);\r\n\r\n        switch (file.option['compressionMethod']) {\r\n          case Zip.CompressionMethod.STORE:\r\n            break;\r\n          case Zip.CompressionMethod.DEFLATE:\r\n            file.buffer = this.deflateWithOption(file.buffer, file.option);\r\n            file.compressed = true;\r\n            break;\r\n          default:\r\n            throw new Error('unknown compression method:' + file.option['compressionMethod']);\r\n        }\r\n      }\r\n\r\n      // encryption\r\n      if (file.option['password'] !== void 0|| this.password !== void 0) {\r\n        // init encryption\r\n        key = this.createEncryptionKey(file.option['password'] || this.password);\r\n\r\n        // add header\r\n        buffer = file.buffer;\r\n        if (USE_TYPEDARRAY) {\r\n          tmp = new Uint8Array(buffer.length + 12);\r\n          tmp.set(buffer, 12);\r\n          buffer = tmp;\r\n        } else {\r\n          buffer.unshift(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\r\n        }\r\n\r\n        for (j = 0; j < 12; ++j) {\r\n          buffer[j] = this.encode(\r\n            key,\r\n            i === 11 ? (file.crc32 & 0xff) : (Math.random() * 256 | 0)\r\n          );\r\n        }\r\n\r\n        // data encryption\r\n        for (jl = buffer.length; j < jl; ++j) {\r\n          buffer[j] = this.encode(key, buffer[j]);\r\n        }\r\n        file.buffer = buffer;\r\n      }\r\n\r\n      // 必要バッファサイズの計算\r\n      localFileSize +=\r\n        // local file header\r\n        30 + filenameLength +\r\n        // file data\r\n        file.buffer.length;\r\n\r\n      centralDirectorySize +=\r\n        // file header\r\n        46 + filenameLength + commentLength;\r\n    }\r\n\r\n    // end of central directory\r\n    endOfCentralDirectorySize = 22 + (this.comment ? this.comment.length : 0);\r\n    output = new (USE_TYPEDARRAY ? Uint8Array : Array)(\r\n      localFileSize + centralDirectorySize + endOfCentralDirectorySize\r\n    );\r\n    op1 = 0;\r\n    op2 = localFileSize;\r\n    op3 = op2 + centralDirectorySize;\r\n\r\n    // ファイルの圧縮\r\n    for (i = 0, il = files.length; i < il; ++i) {\r\n      file = files[i];\r\n      filenameLength =\r\n        file.option['filename'] ? file.option['filename'].length :  0;\r\n      extraFieldLength = 0; // TODO\r\n      commentLength =\r\n        file.option['comment'] ? file.option['comment'].length : 0;\r\n\r\n      //-------------------------------------------------------------------------\r\n      // local file header & file header\r\n      //-------------------------------------------------------------------------\r\n\r\n      offset = op1;\r\n\r\n      // signature\r\n      // local file header\r\n      output[op1++] = Zip.LocalFileHeaderSignature[0];\r\n      output[op1++] = Zip.LocalFileHeaderSignature[1];\r\n      output[op1++] = Zip.LocalFileHeaderSignature[2];\r\n      output[op1++] = Zip.LocalFileHeaderSignature[3];\r\n      // file header\r\n      output[op2++] = Zip.FileHeaderSignature[0];\r\n      output[op2++] = Zip.FileHeaderSignature[1];\r\n      output[op2++] = Zip.FileHeaderSignature[2];\r\n      output[op2++] = Zip.FileHeaderSignature[3];\r\n\r\n      // compressor info\r\n      needVersion = 20;\r\n      output[op2++] = needVersion & 0xff;\r\n      output[op2++] =\r\n        /** @type {Zip.OperatingSystem} */\r\n        (file.option['os']) ||\r\n        Zip.OperatingSystem.MSDOS;\r\n\r\n      // need version\r\n      output[op1++] = output[op2++] =  needVersion       & 0xff;\r\n      output[op1++] = output[op2++] = (needVersion >> 8) & 0xff;\r\n\r\n      // general purpose bit flag\r\n      flags = 0;\r\n      if (file.option['password'] || this.password) {\r\n        flags |= Zip.Flags.ENCRYPT;\r\n      }\r\n      output[op1++] = output[op2++] =  flags       & 0xff;\r\n      output[op1++] = output[op2++] = (flags >> 8) & 0xff;\r\n\r\n      // compression method\r\n      compressionMethod =\r\n        /** @type {Zip.CompressionMethod} */\r\n        (file.option['compressionMethod']);\r\n      output[op1++] = output[op2++] =  compressionMethod       & 0xff;\r\n      output[op1++] = output[op2++] = (compressionMethod >> 8) & 0xff;\r\n\r\n      // date\r\n      date = /** @type {(Date|undefined)} */(file.option['date']) || new Date();\r\n      output[op1++] = output[op2++] =\r\n        ((date.getMinutes() & 0x7) << 5) |\r\n        (date.getSeconds() / 2 | 0);\r\n      output[op1++] = output[op2++] =\r\n        (date.getHours()   << 3) |\r\n        (date.getMinutes() >> 3);\r\n      //\r\n      output[op1++] = output[op2++] =\r\n        ((date.getMonth() + 1 & 0x7) << 5) |\r\n        (date.getDate());\r\n      output[op1++] = output[op2++] =\r\n        ((date.getFullYear() - 1980 & 0x7f) << 1) |\r\n        (date.getMonth() + 1 >> 3);\r\n\r\n      // CRC-32\r\n      crc32 = file.crc32;\r\n      output[op1++] = output[op2++] =  crc32        & 0xff;\r\n      output[op1++] = output[op2++] = (crc32 >>  8) & 0xff;\r\n      output[op1++] = output[op2++] = (crc32 >> 16) & 0xff;\r\n      output[op1++] = output[op2++] = (crc32 >> 24) & 0xff;\r\n\r\n      // compressed size\r\n      size = file.buffer.length;\r\n      output[op1++] = output[op2++] =  size        & 0xff;\r\n      output[op1++] = output[op2++] = (size >>  8) & 0xff;\r\n      output[op1++] = output[op2++] = (size >> 16) & 0xff;\r\n      output[op1++] = output[op2++] = (size >> 24) & 0xff;\r\n\r\n      // uncompressed size\r\n      plainSize = file.size;\r\n      output[op1++] = output[op2++] =  plainSize        & 0xff;\r\n      output[op1++] = output[op2++] = (plainSize >>  8) & 0xff;\r\n      output[op1++] = output[op2++] = (plainSize >> 16) & 0xff;\r\n      output[op1++] = output[op2++] = (plainSize >> 24) & 0xff;\r\n\r\n      // filename length\r\n      output[op1++] = output[op2++] =  filenameLength       & 0xff;\r\n      output[op1++] = output[op2++] = (filenameLength >> 8) & 0xff;\r\n\r\n      // extra field length\r\n      output[op1++] = output[op2++] =  extraFieldLength       & 0xff;\r\n      output[op1++] = output[op2++] = (extraFieldLength >> 8) & 0xff;\r\n\r\n      // file comment length\r\n      output[op2++] =  commentLength       & 0xff;\r\n      output[op2++] = (commentLength >> 8) & 0xff;\r\n\r\n      // disk number start\r\n      output[op2++] = 0;\r\n      output[op2++] = 0;\r\n\r\n      // internal file attributes\r\n      output[op2++] = 0;\r\n      output[op2++] = 0;\r\n\r\n      // external file attributes\r\n      output[op2++] = 0;\r\n      output[op2++] = 0;\r\n      output[op2++] = 0;\r\n      output[op2++] = 0;\r\n\r\n      // relative offset of local header\r\n      output[op2++] =  offset        & 0xff;\r\n      output[op2++] = (offset >>  8) & 0xff;\r\n      output[op2++] = (offset >> 16) & 0xff;\r\n      output[op2++] = (offset >> 24) & 0xff;\r\n\r\n      // filename\r\n      filename = file.option['filename'];\r\n      if (filename) {\r\n        if (USE_TYPEDARRAY) {\r\n          output.set(filename, op1);\r\n          output.set(filename, op2);\r\n          op1 += filenameLength;\r\n          op2 += filenameLength;\r\n        } else {\r\n          for (j = 0; j < filenameLength; ++j) {\r\n            output[op1++] = output[op2++] = filename[j];\r\n          }\r\n        }\r\n      }\r\n\r\n      // extra field\r\n      extraField = file.option['extraField'];\r\n      if (extraField) {\r\n        if (USE_TYPEDARRAY) {\r\n          output.set(extraField, op1);\r\n          output.set(extraField, op2);\r\n          op1 += extraFieldLength;\r\n          op2 += extraFieldLength;\r\n        } else {\r\n          for (j = 0; j < commentLength; ++j) {\r\n            output[op1++] = output[op2++] = extraField[j];\r\n          }\r\n        }\r\n      }\r\n\r\n      // comment\r\n      comment = file.option['comment'];\r\n      if (comment) {\r\n        if (USE_TYPEDARRAY) {\r\n          output.set(comment, op2);\r\n          op2 += commentLength;\r\n        } else {\r\n          for (j = 0; j < commentLength; ++j) {\r\n            output[op2++] = comment[j];\r\n          }\r\n        }\r\n      }\r\n\r\n      //-------------------------------------------------------------------------\r\n      // file data\r\n      //-------------------------------------------------------------------------\r\n\r\n      if (USE_TYPEDARRAY) {\r\n        output.set(file.buffer, op1);\r\n        op1 += file.buffer.length;\r\n      } else {\r\n        for (j = 0, jl = file.buffer.length; j < jl; ++j) {\r\n          output[op1++] = file.buffer[j];\r\n        }\r\n      }\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    // end of central directory\r\n    //-------------------------------------------------------------------------\r\n\r\n    // signature\r\n    output[op3++] = Zip.CentralDirectorySignature[0];\r\n    output[op3++] = Zip.CentralDirectorySignature[1];\r\n    output[op3++] = Zip.CentralDirectorySignature[2];\r\n    output[op3++] = Zip.CentralDirectorySignature[3];\r\n\r\n    // number of this disk\r\n    output[op3++] = 0;\r\n    output[op3++] = 0;\r\n\r\n    // number of the disk with the start of the central directory\r\n    output[op3++] = 0;\r\n    output[op3++] = 0;\r\n\r\n    // total number of entries in the central directory on this disk\r\n    output[op3++] =  il       & 0xff;\r\n    output[op3++] = (il >> 8) & 0xff;\r\n\r\n    // total number of entries in the central directory\r\n    output[op3++] =  il       & 0xff;\r\n    output[op3++] = (il >> 8) & 0xff;\r\n\r\n    // size of the central directory\r\n    output[op3++] =  centralDirectorySize        & 0xff;\r\n    output[op3++] = (centralDirectorySize >>  8) & 0xff;\r\n    output[op3++] = (centralDirectorySize >> 16) & 0xff;\r\n    output[op3++] = (centralDirectorySize >> 24) & 0xff;\r\n\r\n    // offset of start of central directory with respect to the starting disk number\r\n    output[op3++] =  localFileSize        & 0xff;\r\n    output[op3++] = (localFileSize >>  8) & 0xff;\r\n    output[op3++] = (localFileSize >> 16) & 0xff;\r\n    output[op3++] = (localFileSize >> 24) & 0xff;\r\n\r\n    // .ZIP file comment length\r\n    commentLength = this.comment ? this.comment.length : 0;\r\n    output[op3++] =  commentLength       & 0xff;\r\n    output[op3++] = (commentLength >> 8) & 0xff;\r\n\r\n    // .ZIP file comment\r\n    if (this.comment) {\r\n      if (USE_TYPEDARRAY) {\r\n        output.set(this.comment, op3);\r\n        op3 += commentLength;\r\n      } else {\r\n        for (j = 0, jl = commentLength; j < jl; ++j) {\r\n          output[op3++] = this.comment[j];\r\n        }\r\n      }\r\n    }\r\n\r\n    return output;\r\n  };\r\n\r\n  /**\r\n   * @param {!(Array.<number>|Uint8Array)} input\r\n   * @param {Object=} opt_params options.\r\n   * @return {!(Array.<number>|Uint8Array)}\r\n   */\r\n  Zip.prototype.deflateWithOption = function(input, opt_params) {\r\n    /** @type {RawDeflate} */\r\n    var deflator = new RawDeflate(input, opt_params['deflateOption']);\r\n\r\n    return deflator.compress();\r\n  };\r\n\r\n  /**\r\n   * @param {(Array.<number>|Uint32Array)} key\r\n   * @return {number}\r\n   */\r\n  Zip.prototype.getByte = function(key) {\r\n    /** @type {number} */\r\n    var tmp = ((key[2] & 0xffff) | 2);\r\n\r\n    return ((tmp * (tmp ^ 1)) >> 8) & 0xff;\r\n  };\r\n\r\n  /**\r\n   * @param {(Array.<number>|Uint32Array|Object)} key\r\n   * @param {number} n\r\n   * @return {number}\r\n   */\r\n  Zip.prototype.encode = function(key, n) {\r\n    /** @type {number} */\r\n    var tmp = this.getByte(/** @type {(Array.<number>|Uint32Array)} */(key));\r\n\r\n    this.updateKeys(/** @type {(Array.<number>|Uint32Array)} */(key), n);\r\n\r\n    return tmp ^ n;\r\n  };\r\n\r\n  /**\r\n   * @param {(Array.<number>|Uint32Array)} key\r\n   * @param {number} n\r\n   */\r\n  Zip.prototype.updateKeys = function(key, n) {\r\n    key[0] = CRC32.single(key[0], n);\r\n    key[1] =\r\n      (((((key[1] + (key[0] & 0xff)) * 20173 >>> 0) * 6681) >>> 0) + 1) >>> 0;\r\n    key[2] = CRC32.single(key[2], key[1] >>> 24);\r\n  };\r\n\r\n  /**\r\n   * @param {(Array.<number>|Uint8Array)} password\r\n   * @return {!(Array.<number>|Uint32Array|Object)}\r\n   */\r\n  Zip.prototype.createEncryptionKey = function(password) {\r\n    /** @type {!(Array.<number>|Uint32Array)} */\r\n    var key = [305419896, 591751049, 878082192];\r\n    /** @type {number} */\r\n    var i;\r\n    /** @type {number} */\r\n    var il;\r\n\r\n    if (USE_TYPEDARRAY) {\r\n      key = new Uint32Array(key);\r\n    }\r\n\r\n    for (i = 0, il = password.length; i < il; ++i) {\r\n      this.updateKeys(key, password[i] & 0xff);\r\n    }\r\n\r\n    return key;\r\n  };\r\n\r\n  return Zlib.Zip = Zip;\r\n});\r\n\r\n"]}