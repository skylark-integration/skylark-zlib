{"version":3,"sources":["Gzip.js"],"names":["define","Zlib","CRC32","RawDeflate","Gzip","input","opt_params","this","ip","output","op","flags","filename","comment","deflateOptions","DefaultBufferSize","prototype","compress","flg","mtime","crc16","crc32","rawdeflate","c","i","il","Uint8Array","FlagsMask","FNAME","FCOMMENT","FHCRC","Date","now","OperatingSystem","UNKNOWN","length","charCodeAt","calc","buffer","byteLength","set","subarray","FAT","AMIGA","VMS","UNIX","VM_CMS","ATARI_TOS","HPFS","MACINTOSH","Z_SYSTEM","CP_M","TOPS_20","NTFS","QDOS","ACORN_RISCOS","FTEXT","FEXTRA"],"mappings":"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","file":"../Gzip.js","sourcesContent":["define([\r\n  \"./zlib\",\r\n  \"./crc32\",\r\n  \"./RawDeflate\"\r\n],function(Zlib,CRC32,RawDeflate) {\r\n  /**\r\n   * @fileoverview GZIP (RFC1952) 実装.\r\n   */\r\n\r\n  const USE_TYPEDARRAY = true;\r\n\r\n  /**\r\n   * @constructor\r\n   * @param {!(Array|Uint8Array)} input input buffer.\r\n   * @param {Object=} opt_params option parameters.\r\n   */\r\n  var Gzip = function(input, opt_params) {\r\n    /** @type {!(Array.<number>|Uint8Array)} input buffer. */\r\n    this.input = input;\r\n    /** @type {number} input buffer pointer. */\r\n    this.ip = 0;\r\n    /** @type {!(Array.<number>|Uint8Array)} output buffer. */\r\n    this.output;\r\n    /** @type {number} output buffer. */\r\n    this.op = 0;\r\n    /** @type {!Object} flags option flags. */\r\n    this.flags = {};\r\n    /** @type {!string} filename. */\r\n    this.filename;\r\n    /** @type {!string} comment. */\r\n    this.comment;\r\n    /** @type {!Object} deflate options. */\r\n    this.deflateOptions;\r\n\r\n    // option parameters\r\n    if (opt_params) {\r\n      if (opt_params['flags']) {\r\n        this.flags = opt_params['flags'];\r\n      }\r\n      if (typeof opt_params['filename'] === 'string') {\r\n        this.filename = opt_params['filename'];\r\n      }\r\n      if (typeof opt_params['comment'] === 'string') {\r\n        this.comment = opt_params['comment'];\r\n      }\r\n      if (opt_params['deflateOptions']) {\r\n        this.deflateOptions = opt_params['deflateOptions'];\r\n      }\r\n    }\r\n\r\n    if (!this.deflateOptions) {\r\n      this.deflateOptions = {};\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @type {number}\r\n   * @const\r\n   */\r\n  Gzip.DefaultBufferSize = 0x8000;\r\n\r\n  /**\r\n   * encode gzip members.\r\n   * @return {!(Array|Uint8Array)} gzip binary array.\r\n   */\r\n  Gzip.prototype.compress = function() {\r\n    /** @type {number} flags. */\r\n    var flg;\r\n    /** @type {number} modification time. */\r\n    var mtime;\r\n    /** @type {number} CRC-16 value for FHCRC flag. */\r\n    var crc16;\r\n    /** @type {number} CRC-32 value for verification. */\r\n    var crc32;\r\n    /** @type {!RawDeflate} raw deflate object. */\r\n    var rawdeflate;\r\n    /** @type {number} character code */\r\n    var c;\r\n    /** @type {number} loop counter. */\r\n    var i;\r\n    /** @type {number} loop limiter. */\r\n    var il;\r\n    /** @type {!(Array|Uint8Array)} output buffer. */\r\n    var output =\r\n      new (USE_TYPEDARRAY ? Uint8Array : Array)(Gzip.DefaultBufferSize);\r\n    /** @type {number} output buffer pointer. */\r\n    var op = 0;\r\n\r\n    var input = this.input;\r\n    var ip = this.ip;\r\n    var filename = this.filename;\r\n    var comment = this.comment;\r\n\r\n    // check signature\r\n    output[op++] = 0x1f;\r\n    output[op++] = 0x8b;\r\n\r\n    // check compression method\r\n    output[op++] = 8; /* XXX: use Zlib const */\r\n\r\n    // flags\r\n    flg = 0;\r\n    if (this.flags['fname'])    flg |= Gzip.FlagsMask.FNAME;\r\n    if (this.flags['fcomment']) flg |= Gzip.FlagsMask.FCOMMENT;\r\n    if (this.flags['fhcrc'])    flg |= Gzip.FlagsMask.FHCRC;\r\n    // XXX: FTEXT\r\n    // XXX: FEXTRA\r\n    output[op++] = flg;\r\n\r\n    // modification time\r\n    mtime = (Date.now ? Date.now() : +new Date()) / 1000 | 0;\r\n    output[op++] = mtime        & 0xff;\r\n    output[op++] = mtime >>>  8 & 0xff;\r\n    output[op++] = mtime >>> 16 & 0xff;\r\n    output[op++] = mtime >>> 24 & 0xff;\r\n\r\n    // extra flags\r\n    output[op++] = 0;\r\n\r\n    // operating system\r\n    output[op++] = Gzip.OperatingSystem.UNKNOWN;\r\n\r\n    // extra\r\n    /* NOP */\r\n\r\n    // fname\r\n    if (this.flags['fname'] !== void 0) {\r\n      for (i = 0, il = filename.length; i < il; ++i) {\r\n        c = filename.charCodeAt(i);\r\n        if (c > 0xff) { output[op++] = (c >>> 8) & 0xff; }\r\n        output[op++] = c & 0xff;\r\n      }\r\n      output[op++] = 0; // null termination\r\n    }\r\n\r\n    // fcomment\r\n    if (this.flags['comment']) {\r\n      for (i = 0, il = comment.length; i < il; ++i) {\r\n        c = comment.charCodeAt(i);\r\n        if (c > 0xff) { output[op++] = (c >>> 8) & 0xff; }\r\n        output[op++] = c & 0xff;\r\n      }\r\n      output[op++] = 0; // null termination\r\n    }\r\n\r\n    // fhcrc\r\n    if (this.flags['fhcrc']) {\r\n      crc16 = CRC32.calc(output, 0, op) & 0xffff;\r\n      output[op++] = (crc16      ) & 0xff;\r\n      output[op++] = (crc16 >>> 8) & 0xff;\r\n    }\r\n\r\n    // add compress option\r\n    this.deflateOptions['outputBuffer'] = output;\r\n    this.deflateOptions['outputIndex'] = op;\r\n\r\n    // compress\r\n    rawdeflate = new RawDeflate(input, this.deflateOptions);\r\n    output = rawdeflate.compress();\r\n    op = rawdeflate.op;\r\n\r\n    // expand buffer\r\n    if (USE_TYPEDARRAY) {\r\n      if (op + 8 > output.buffer.byteLength) {\r\n        this.output = new Uint8Array(op + 8);\r\n        this.output.set(new Uint8Array(output.buffer));\r\n        output = this.output;\r\n      } else {\r\n        output = new Uint8Array(output.buffer);\r\n      }\r\n    }\r\n\r\n    // crc32\r\n    crc32 = CRC32.calc(input);\r\n    output[op++] = (crc32       ) & 0xff;\r\n    output[op++] = (crc32 >>>  8) & 0xff;\r\n    output[op++] = (crc32 >>> 16) & 0xff;\r\n    output[op++] = (crc32 >>> 24) & 0xff;\r\n\r\n    // input size\r\n    il = input.length;\r\n    output[op++] = (il       ) & 0xff;\r\n    output[op++] = (il >>>  8) & 0xff;\r\n    output[op++] = (il >>> 16) & 0xff;\r\n    output[op++] = (il >>> 24) & 0xff;\r\n\r\n    this.ip = ip;\r\n\r\n    if (USE_TYPEDARRAY && op < output.length) {\r\n      this.output = output = output.subarray(0, op);\r\n    }\r\n\r\n    return output;\r\n  };\r\n\r\n  /** @enum {number} */\r\n  Gzip.OperatingSystem = {\r\n    FAT: 0,\r\n    AMIGA: 1,\r\n    VMS: 2,\r\n    UNIX: 3,\r\n    VM_CMS: 4,\r\n    ATARI_TOS: 5,\r\n    HPFS: 6,\r\n    MACINTOSH: 7,\r\n    Z_SYSTEM: 8,\r\n    CP_M: 9,\r\n    TOPS_20: 10,\r\n    NTFS: 11,\r\n    QDOS: 12,\r\n    ACORN_RISCOS: 13,\r\n    UNKNOWN: 255\r\n  };\r\n\r\n  /** @enum {number} */\r\n  Gzip.FlagsMask = {\r\n    FTEXT: 0x01,\r\n    FHCRC: 0x02,\r\n    FEXTRA: 0x04,\r\n    FNAME: 0x08,\r\n    FCOMMENT: 0x10\r\n  };\r\n\r\n\r\n  return Zlib.Gzip = Gzip;\r\n\r\n});\r\n\r\n"]}