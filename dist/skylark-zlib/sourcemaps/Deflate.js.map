{"version":3,"sources":["Deflate.js"],"names":["define","Zlib","Adler32","RawDeflate","Deflate","input","opt_params","this","output","Uint8Array","DefaultBufferSize","compressionType","CompressionType","DYNAMIC","rawDeflate","prop","rawDeflateOption","compress","prototype","cm","cinfo","cmf","flg","flevel","adler","pos","CompressionMethod","DEFLATE","Math","LOG2E","log","WindowSize","Error","NONE","FIXED","op","length","buffer","set","subarray"],"mappings":";;;;;;;AAAAA,QACE,SACA,YACA,gBAEA,SAASC,EAAKC,EAAQC,GActB,IAAIC,EAAU,SAASC,EAAOC,GAE5BC,KAAKF,MAAQA,EAEbE,KAAKC,OACH,IAAsBC,WAAoBL,EAAQM,mBAEpDH,KAAKI,gBAAkBP,EAAQQ,gBAAgBC,QAE/CN,KAAKO,WAEL,IAEIC,EAFAC,KAYJ,IAAKD,KAPDT,IAAgBA,OAC2B,iBAAlCA,EAA4B,kBACrCC,KAAKI,gBAAkBL,EAA4B,iBAK1CA,EACXU,EAAiBD,GAAQT,EAAWS,GAItCC,EAA+B,aAAIT,KAAKC,OAExCD,KAAKO,WAAa,IAAIX,EAAWI,KAAKF,MAAOW,IAmH/C,OA5GAZ,EAAQM,kBAAoB,MAK5BN,EAAQQ,gBAAkBT,EAAWS,gBAQrCR,EAAQa,SAAW,SAASZ,EAAOC,GACjC,OAAO,IAAKF,EAAQC,EAAOC,GAAaW,YAO1Cb,EAAQc,UAAUD,SAAW,WAE3B,IAAIE,EAEAC,EAEAC,EAEAC,EAMAC,EAIAC,EAIAhB,EAEAiB,EAAM,EAMV,OAJAjB,EAASD,KAAKC,OAGdW,EAAKlB,EAAKyB,kBAAkBC,SAE1B,KAAK1B,EAAKyB,kBAAkBC,QAC1BP,EAAQQ,KAAKC,MAAQD,KAAKE,IAAI3B,EAAW4B,YAAc,EACvD,MACF,QACE,MAAM,IAAIC,MAAM,8BAOpB,OALAX,EAAOD,GAAS,EAAKD,EACrBX,EAAOiB,KAASJ,EAGR,EACAF,GACN,KAAKlB,EAAKyB,kBAAkBC,QAC1B,OAAQpB,KAAKI,iBACX,KAAKP,EAAQQ,gBAAgBqB,KAAMV,EAAS,EAAG,MAC/C,KAAKnB,EAAQQ,gBAAgBsB,MAAOX,EAAS,EAAG,MAChD,KAAKnB,EAAQQ,gBAAgBC,QAASU,EAAS,EAAG,MAClD,QAAS,MAAM,IAAIS,MAAM,gCAE3B,MACF,QACE,MAAM,IAAIA,MAAM,8BAgCpB,OA9BAV,EAAOC,GAAU,EAAK,EAEtBD,GADS,IAAY,IAAND,EAAYC,GAAO,GAElCd,EAAOiB,KAASH,EAGhBE,EAAQtB,EAAQK,KAAKF,OAErBE,KAAKO,WAAWqB,GAAKV,EAErBA,GADAjB,EAASD,KAAKO,WAAWG,YACZmB,QAIX5B,EAAS,IAAIC,WAAWD,EAAO6B,SAEpBD,QAAUX,EAAM,IACzBlB,KAAKC,OAAS,IAAIC,WAAWD,EAAO4B,OAAS,GAC7C7B,KAAKC,OAAO8B,IAAI9B,GAChBA,EAASD,KAAKC,SAEhBA,EAASA,EAAO+B,SAAS,EAAGd,EAAM,IAI7BA,KAAUD,GAAS,GAAM,IAChChB,EAAOiB,KAAUD,GAAS,GAAM,IAChChB,EAAOiB,KAAUD,GAAU,EAAK,IAChChB,EAAOiB,KAAyB,IAAhB,EAETjB,GAGFP,EAAKG,QAAUA","file":"../Deflate.js","sourcesContent":["define([\r\n  \"./zlib\",\r\n  \"./adler32\",\r\n  \"./RawDeflate\"\r\n\r\n],function(Zlib,Adler32,RawDeflate) {\r\n  /**\r\n   * @fileoverview Deflate (RFC1951) 実装.\r\n   * Deflateアルゴリズム本体は RawDeflate で実装されている.\r\n   */\r\n\r\n   const USE_TYPEDARRAY = true;\r\n\r\n  /**\r\n   * Zlib Deflate\r\n   * @constructor\r\n   * @param {!(Array|Uint8Array)} input 符号化する対象の byte array.\r\n   * @param {Object=} opt_params option parameters.\r\n   */\r\n  var Deflate = function(input, opt_params) {\r\n    /** @type {!(Array|Uint8Array)} */\r\n    this.input = input;\r\n    /** @type {!(Array|Uint8Array)} */\r\n    this.output =\r\n      new (USE_TYPEDARRAY ? Uint8Array : Array)(Deflate.DefaultBufferSize);\r\n    /** @type {Deflate.CompressionType} */\r\n    this.compressionType = Deflate.CompressionType.DYNAMIC;\r\n    /** @type {RawDeflate} */\r\n    this.rawDeflate;\r\n    /** @type {Object} */\r\n    var rawDeflateOption = {};\r\n    /** @type {string} */\r\n    var prop;\r\n\r\n    // option parameters\r\n    if (opt_params || !(opt_params = {})) {\r\n      if (typeof opt_params['compressionType'] === 'number') {\r\n        this.compressionType = opt_params['compressionType'];\r\n      }\r\n    }\r\n\r\n    // copy options\r\n    for (prop in opt_params) {\r\n      rawDeflateOption[prop] = opt_params[prop];\r\n    }\r\n\r\n    // set raw-deflate output buffer\r\n    rawDeflateOption['outputBuffer'] = this.output;\r\n\r\n    this.rawDeflate = new RawDeflate(this.input, rawDeflateOption);\r\n  };\r\n\r\n  /**\r\n   * @const\r\n   * @type {number} デフォルトバッファサイズ.\r\n   */\r\n  Deflate.DefaultBufferSize = 0x8000;\r\n\r\n  /**\r\n   * @enum {number}\r\n   */\r\n  Deflate.CompressionType = RawDeflate.CompressionType;\r\n\r\n  /**\r\n   * 直接圧縮に掛ける.\r\n   * @param {!(Array|Uint8Array)} input target buffer.\r\n   * @param {Object=} opt_params option parameters.\r\n   * @return {!(Array|Uint8Array)} compressed data byte array.\r\n   */\r\n  Deflate.compress = function(input, opt_params) {\r\n    return (new Deflate(input, opt_params)).compress();\r\n  };\r\n\r\n  /**\r\n   * Deflate Compression.\r\n   * @return {!(Array|Uint8Array)} compressed data byte array.\r\n   */\r\n  Deflate.prototype.compress = function() {\r\n    /** @type {CompressionMethod} */\r\n    var cm;\r\n    /** @type {number} */\r\n    var cinfo;\r\n    /** @type {number} */\r\n    var cmf;\r\n    /** @type {number} */\r\n    var flg;\r\n    /** @type {number} */\r\n    var fcheck;\r\n    /** @type {number} */\r\n    var fdict;\r\n    /** @type {number} */\r\n    var flevel;\r\n    /** @type {number} */\r\n    var clevel;\r\n    /** @type {number} */\r\n    var adler;\r\n    /** @type {boolean} */\r\n    var error = false;\r\n    /** @type {!(Array|Uint8Array)} */\r\n    var output;\r\n    /** @type {number} */\r\n    var pos = 0;\r\n\r\n    output = this.output;\r\n\r\n    // Compression Method and Flags\r\n    cm = Zlib.CompressionMethod.DEFLATE;\r\n    switch (cm) {\r\n      case Zlib.CompressionMethod.DEFLATE:\r\n        cinfo = Math.LOG2E * Math.log(RawDeflate.WindowSize) - 8;\r\n        break;\r\n      default:\r\n        throw new Error('invalid compression method');\r\n    }\r\n    cmf = (cinfo << 4) | cm;\r\n    output[pos++] = cmf;\r\n\r\n    // Flags\r\n    fdict = 0;\r\n    switch (cm) {\r\n      case Zlib.CompressionMethod.DEFLATE:\r\n        switch (this.compressionType) {\r\n          case Deflate.CompressionType.NONE: flevel = 0; break;\r\n          case Deflate.CompressionType.FIXED: flevel = 1; break;\r\n          case Deflate.CompressionType.DYNAMIC: flevel = 2; break;\r\n          default: throw new Error('unsupported compression type');\r\n        }\r\n        break;\r\n      default:\r\n        throw new Error('invalid compression method');\r\n    }\r\n    flg = (flevel << 6) | (fdict << 5);\r\n    fcheck = 31 - (cmf * 256 + flg) % 31;\r\n    flg |= fcheck;\r\n    output[pos++] = flg;\r\n\r\n    // Adler-32 checksum\r\n    adler = Adler32(this.input);\r\n\r\n    this.rawDeflate.op = pos;\r\n    output = this.rawDeflate.compress();\r\n    pos = output.length;\r\n\r\n    if (USE_TYPEDARRAY) {\r\n      // subarray 分を元にもどす\r\n      output = new Uint8Array(output.buffer);\r\n      // expand buffer\r\n      if (output.length <= pos + 4) {\r\n        this.output = new Uint8Array(output.length + 4);\r\n        this.output.set(output);\r\n        output = this.output;\r\n      }\r\n      output = output.subarray(0, pos + 4);\r\n    }\r\n\r\n    // adler32\r\n    output[pos++] = (adler >> 24) & 0xff;\r\n    output[pos++] = (adler >> 16) & 0xff;\r\n    output[pos++] = (adler >>  8) & 0xff;\r\n    output[pos++] = (adler      ) & 0xff;\r\n\r\n    return output;\r\n  };\r\n\r\n  return Zlib.Deflate = Deflate;\r\n\r\n});\r\n"]}