{"version":3,"sources":["Deflate.js"],"names":["define","Zlib","Adler32","RawDeflate","Deflate","input","opt_params","this","output","Uint8Array","DefaultBufferSize","compressionType","CompressionType","DYNAMIC","rawDeflate","prop","rawDeflateOption","compress","prototype","cm","cinfo","cmf","flg","flevel","adler","pos","CompressionMethod","DEFLATE","Math","LOG2E","log","WindowSize","Error","NONE","FIXED","op","length","buffer","set","subarray"],"mappings":";;;;;;;AAAAA,QACE,SACA,YACA,gBAEA,SAASC,EAAKC,EAAQC,GActB,IAAIC,EAAU,SAASC,EAAOC,GAE5BC,KAAKF,MAAQA,EAEbE,KAAKC,OACH,IAAsBC,WAAoBL,EAAQM,mBAEpDH,KAAKI,gBAAkBP,EAAQQ,gBAAgBC,QAE/CN,KAAKO,WAEL,IAEIC,EAFAC,KAYJ,IAAKD,KAPDT,IAAgBA,OAC2B,iBAAlCA,EAA4B,kBACrCC,KAAKI,gBAAkBL,EAA4B,iBAK1CA,EACXU,EAAiBD,GAAQT,EAAWS,GAItCC,EAA+B,aAAIT,KAAKC,OAExCD,KAAKO,WAAa,IAAIX,EAAWI,KAAKF,MAAOW,IAmH/C,OA5GAZ,EAAQM,kBAAoB,MAK5BN,EAAQQ,gBAAkBT,EAAWS,gBAQrCR,EAAQa,SAAW,SAASZ,EAAOC,GACjC,OAAO,IAAKF,EAAQC,EAAOC,GAAaW,YAO1Cb,EAAQc,UAAUD,SAAW,WAE3B,IAAIE,EAEAC,EAEAC,EAEAC,EAMAC,EAIAC,EAIAhB,EAEAiB,EAAM,EAMV,OAJAjB,EAASD,KAAKC,OAGdW,EAAKlB,EAAKyB,kBAAkBC,SAE1B,KAAK1B,EAAKyB,kBAAkBC,QAC1BP,EAAQQ,KAAKC,MAAQD,KAAKE,IAAI3B,EAAW4B,YAAc,EACvD,MACF,QACE,MAAM,IAAIC,MAAM,8BAOpB,OALAX,EAAOD,GAAS,EAAKD,EACrBX,EAAOiB,KAASJ,EAGR,EACAF,GACN,KAAKlB,EAAKyB,kBAAkBC,QAC1B,OAAQpB,KAAKI,iBACX,KAAKP,EAAQQ,gBAAgBqB,KAAMV,EAAS,EAAG,MAC/C,KAAKnB,EAAQQ,gBAAgBsB,MAAOX,EAAS,EAAG,MAChD,KAAKnB,EAAQQ,gBAAgBC,QAASU,EAAS,EAAG,MAClD,QAAS,MAAM,IAAIS,MAAM,gCAE3B,MACF,QACE,MAAM,IAAIA,MAAM,8BAgCpB,OA9BAV,EAAOC,GAAU,EAAK,EAEtBD,GADS,IAAY,IAAND,EAAYC,GAAO,GAElCd,EAAOiB,KAASH,EAGhBE,EAAQtB,EAAQK,KAAKF,OAErBE,KAAKO,WAAWqB,GAAKV,EAErBA,GADAjB,EAASD,KAAKO,WAAWG,YACZmB,QAIX5B,EAAS,IAAIC,WAAWD,EAAO6B,SAEpBD,QAAUX,EAAM,IACzBlB,KAAKC,OAAS,IAAIC,WAAWD,EAAO4B,OAAS,GAC7C7B,KAAKC,OAAO8B,IAAI9B,GAChBA,EAASD,KAAKC,SAEhBA,EAASA,EAAO+B,SAAS,EAAGd,EAAM,IAI7BA,KAAUD,GAAS,GAAM,IAChChB,EAAOiB,KAAUD,GAAS,GAAM,IAChChB,EAAOiB,KAAUD,GAAU,EAAK,IAChChB,EAAOiB,KAAyB,IAAhB,EAETjB,GAGFP,EAAKG,QAAUA","file":"../Deflate.js","sourcesContent":["define([\n  \"./zlib\",\n  \"./adler32\",\n  \"./RawDeflate\"\n\n],function(Zlib,Adler32,RawDeflate) {\n  /**\n   * @fileoverview Deflate (RFC1951) 実装.\n   * Deflateアルゴリズム本体は RawDeflate で実装されている.\n   */\n\n   const USE_TYPEDARRAY = true;\n\n  /**\n   * Zlib Deflate\n   * @constructor\n   * @param {!(Array|Uint8Array)} input 符号化する対象の byte array.\n   * @param {Object=} opt_params option parameters.\n   */\n  var Deflate = function(input, opt_params) {\n    /** @type {!(Array|Uint8Array)} */\n    this.input = input;\n    /** @type {!(Array|Uint8Array)} */\n    this.output =\n      new (USE_TYPEDARRAY ? Uint8Array : Array)(Deflate.DefaultBufferSize);\n    /** @type {Deflate.CompressionType} */\n    this.compressionType = Deflate.CompressionType.DYNAMIC;\n    /** @type {RawDeflate} */\n    this.rawDeflate;\n    /** @type {Object} */\n    var rawDeflateOption = {};\n    /** @type {string} */\n    var prop;\n\n    // option parameters\n    if (opt_params || !(opt_params = {})) {\n      if (typeof opt_params['compressionType'] === 'number') {\n        this.compressionType = opt_params['compressionType'];\n      }\n    }\n\n    // copy options\n    for (prop in opt_params) {\n      rawDeflateOption[prop] = opt_params[prop];\n    }\n\n    // set raw-deflate output buffer\n    rawDeflateOption['outputBuffer'] = this.output;\n\n    this.rawDeflate = new RawDeflate(this.input, rawDeflateOption);\n  };\n\n  /**\n   * @const\n   * @type {number} デフォルトバッファサイズ.\n   */\n  Deflate.DefaultBufferSize = 0x8000;\n\n  /**\n   * @enum {number}\n   */\n  Deflate.CompressionType = RawDeflate.CompressionType;\n\n  /**\n   * 直接圧縮に掛ける.\n   * @param {!(Array|Uint8Array)} input target buffer.\n   * @param {Object=} opt_params option parameters.\n   * @return {!(Array|Uint8Array)} compressed data byte array.\n   */\n  Deflate.compress = function(input, opt_params) {\n    return (new Deflate(input, opt_params)).compress();\n  };\n\n  /**\n   * Deflate Compression.\n   * @return {!(Array|Uint8Array)} compressed data byte array.\n   */\n  Deflate.prototype.compress = function() {\n    /** @type {CompressionMethod} */\n    var cm;\n    /** @type {number} */\n    var cinfo;\n    /** @type {number} */\n    var cmf;\n    /** @type {number} */\n    var flg;\n    /** @type {number} */\n    var fcheck;\n    /** @type {number} */\n    var fdict;\n    /** @type {number} */\n    var flevel;\n    /** @type {number} */\n    var clevel;\n    /** @type {number} */\n    var adler;\n    /** @type {boolean} */\n    var error = false;\n    /** @type {!(Array|Uint8Array)} */\n    var output;\n    /** @type {number} */\n    var pos = 0;\n\n    output = this.output;\n\n    // Compression Method and Flags\n    cm = Zlib.CompressionMethod.DEFLATE;\n    switch (cm) {\n      case Zlib.CompressionMethod.DEFLATE:\n        cinfo = Math.LOG2E * Math.log(RawDeflate.WindowSize) - 8;\n        break;\n      default:\n        throw new Error('invalid compression method');\n    }\n    cmf = (cinfo << 4) | cm;\n    output[pos++] = cmf;\n\n    // Flags\n    fdict = 0;\n    switch (cm) {\n      case Zlib.CompressionMethod.DEFLATE:\n        switch (this.compressionType) {\n          case Deflate.CompressionType.NONE: flevel = 0; break;\n          case Deflate.CompressionType.FIXED: flevel = 1; break;\n          case Deflate.CompressionType.DYNAMIC: flevel = 2; break;\n          default: throw new Error('unsupported compression type');\n        }\n        break;\n      default:\n        throw new Error('invalid compression method');\n    }\n    flg = (flevel << 6) | (fdict << 5);\n    fcheck = 31 - (cmf * 256 + flg) % 31;\n    flg |= fcheck;\n    output[pos++] = flg;\n\n    // Adler-32 checksum\n    adler = Adler32(this.input);\n\n    this.rawDeflate.op = pos;\n    output = this.rawDeflate.compress();\n    pos = output.length;\n\n    if (USE_TYPEDARRAY) {\n      // subarray 分を元にもどす\n      output = new Uint8Array(output.buffer);\n      // expand buffer\n      if (output.length <= pos + 4) {\n        this.output = new Uint8Array(output.length + 4);\n        this.output.set(output);\n        output = this.output;\n      }\n      output = output.subarray(0, pos + 4);\n    }\n\n    // adler32\n    output[pos++] = (adler >> 24) & 0xff;\n    output[pos++] = (adler >> 16) & 0xff;\n    output[pos++] = (adler >>  8) & 0xff;\n    output[pos++] = (adler      ) & 0xff;\n\n    return output;\n  };\n\n  return Zlib.Deflate = Deflate;\n\n});\n"]}