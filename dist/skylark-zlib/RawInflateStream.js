/**
 * skylark-zlib - A version of zlib.js that ported to running on skylarkjs.
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-zlib/
 * @license MIT
 */
define(["./zlib","./huffman","./RawInflateStream"],function(t,i,s){const e=!0;var r,a=i.buildHuffmanTable;return(s=function(t,i,r){this.blocks=[],this.bufferSize=r||32768,this.totalpos=0,this.ip=void 0===i?0:i,this.bitsbuf=0,this.bitsbuflen=0,this.input=e?new Uint8Array(t):t,this.output=new(e?Uint8Array:Array)(this.bufferSize),this.op=0,this.bfinal=!1,this.blockLength,this.resize=!1,this.litlenTable,this.distTable,this.sp=0,this.status=s.Status.INITIALIZED,this.ip_,this.bitsbuflen_,this.bitsbuf_}).BlockType={UNCOMPRESSED:0,FIXED:1,DYNAMIC:2},s.Status={INITIALIZED:0,BLOCK_HEADER_START:1,BLOCK_HEADER_END:2,BLOCK_BODY_START:3,BLOCK_BODY_END:4,DECODE_BLOCK_START:5,DECODE_BLOCK_END:6},s.prototype.decompress=function(t,i){var e=!1;for(void 0!==t&&(this.input=t),void 0!==i&&(this.ip=i);!e;)switch(this.status){case s.Status.INITIALIZED:case s.Status.BLOCK_HEADER_START:this.readBlockHeader()<0&&(e=!0);break;case s.Status.BLOCK_HEADER_END:case s.Status.BLOCK_BODY_START:switch(this.currentBlockType){case s.BlockType.UNCOMPRESSED:this.readUncompressedBlockHeader()<0&&(e=!0);break;case s.BlockType.FIXED:this.parseFixedHuffmanBlock()<0&&(e=!0);break;case s.BlockType.DYNAMIC:this.parseDynamicHuffmanBlock()<0&&(e=!0)}break;case s.Status.BLOCK_BODY_END:case s.Status.DECODE_BLOCK_START:switch(this.currentBlockType){case s.BlockType.UNCOMPRESSED:this.parseUncompressedBlock()<0&&(e=!0);break;case s.BlockType.FIXED:case s.BlockType.DYNAMIC:this.decodeHuffman()<0&&(e=!0)}break;case s.Status.DECODE_BLOCK_END:this.bfinal?e=!0:this.status=s.Status.INITIALIZED}return this.concatBuffer()},s.MaxBackwardLength=32768,s.MaxCopyLength=258,s.Order=(r=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],e?new Uint16Array(r):r),s.LengthCodeTable=function(t){return e?new Uint16Array(t):t}([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258]),s.LengthExtraTable=function(t){return e?new Uint8Array(t):t}([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0]),s.DistCodeTable=function(t){return e?new Uint16Array(t):t}([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577]),s.DistExtraTable=function(t){return e?new Uint8Array(t):t}([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),s.FixedLiteralLengthTable=function(){var t,i,s=new(e?Uint8Array:Array)(288);for(t=0,i=s.length;t<i;++t)s[t]=t<=143?8:t<=255?9:t<=279?7:8;return a(s)}(),s.FixedDistanceTable=function(){var t,i,s=new(e?Uint8Array:Array)(30);for(t=0,i=s.length;t<i;++t)s[t]=5;return a(s)}(),s.prototype.readBlockHeader=function(){var t;if(this.status=s.Status.BLOCK_HEADER_START,this.save_(),(t=this.readBits(3))<0)return this.restore_(),-1;switch(1&t&&(this.bfinal=!0),t>>>=1){case 0:this.currentBlockType=s.BlockType.UNCOMPRESSED;break;case 1:this.currentBlockType=s.BlockType.FIXED;break;case 2:this.currentBlockType=s.BlockType.DYNAMIC;break;default:throw new Error("unknown BTYPE: "+t)}this.status=s.Status.BLOCK_HEADER_END},s.prototype.readBits=function(t){for(var i,s=this.bitsbuf,e=this.bitsbuflen,r=this.input,a=this.ip;e<t;){if(r.length<=a)return-1;s|=(i=r[a++])<<e,e+=8}return i=s&(1<<t)-1,s>>>=t,e-=t,this.bitsbuf=s,this.bitsbuflen=e,this.ip=a,i},s.prototype.readCodeByTable=function(t){for(var i,s,e=this.bitsbuf,r=this.bitsbuflen,a=this.input,n=this.ip,h=t[0],u=t[1];r<u;){if(a.length<=n)return-1;e|=a[n++]<<r,r+=8}if((s=(i=h[e&(1<<u)-1])>>>16)>r)throw new Error("invalid code length: "+s);return this.bitsbuf=e>>s,this.bitsbuflen=r-s,this.ip=n,65535&i},s.prototype.readUncompressedBlockHeader=function(){var t,i=this.input,e=this.ip;if(this.status=s.Status.BLOCK_BODY_START,e+4>=i.length)return-1;if((t=i[e++]|i[e++]<<8)===~(i[e++]|i[e++]<<8))throw new Error("invalid uncompressed block header: length verify");this.bitsbuf=0,this.bitsbuflen=0,this.ip=e,this.blockLength=t,this.status=s.Status.BLOCK_BODY_END},s.prototype.parseUncompressedBlock=function(){var t=this.input,i=this.ip,e=this.output,r=this.op,a=this.blockLength;for(this.status=s.Status.DECODE_BLOCK_START;a--;){if(r===e.length&&(e=this.expandBuffer({fixRatio:2})),i>=t.length)return this.ip=i,this.op=r,this.blockLength=a+1,-1;e[r++]=t[i++]}return a<0&&(this.status=s.Status.DECODE_BLOCK_END),this.ip=i,this.op=r,0},s.prototype.parseFixedHuffmanBlock=function(){return this.status=s.Status.BLOCK_BODY_START,this.litlenTable=s.FixedLiteralLengthTable,this.distTable=s.FixedDistanceTable,this.status=s.Status.BLOCK_BODY_END,0},s.prototype.save_=function(){this.ip_=this.ip,this.bitsbuflen_=this.bitsbuflen,this.bitsbuf_=this.bitsbuf},s.prototype.restore_=function(){this.ip=this.ip_,this.bitsbuflen=this.bitsbuflen_,this.bitsbuf=this.bitsbuf_},s.prototype.parseDynamicHuffmanBlock=function(){var t,i,r,n,h=new(e?Uint8Array:Array)(s.Order.length);if(this.status=s.Status.BLOCK_BODY_START,this.save_(),t=this.readBits(5)+257,i=this.readBits(5)+1,r=this.readBits(4)+4,t<0||i<0||r<0)return this.restore_(),-1;try{(function(){var u,o,f,p,l,c,b=0;for(l=0;l<r;++l){if((u=this.readBits(3))<0)throw new Error("not enough input");h[s.Order[l]]=u}for(n=a(h),p=new(e?Uint8Array:Array)(t+i),l=0,c=t+i;l<c;){if((o=this.readCodeByTable(n))<0)throw new Error("not enough input");switch(o){case 16:if((u=this.readBits(2))<0)throw new Error("not enough input");for(f=3+u;f--;)p[l++]=b;break;case 17:if((u=this.readBits(3))<0)throw new Error("not enough input");for(f=3+u;f--;)p[l++]=0;b=0;break;case 18:if((u=this.readBits(7))<0)throw new Error("not enough input");for(f=11+u;f--;)p[l++]=0;b=0;break;default:p[l++]=o,b=o}}new(e?Uint8Array:Array)(t),new(e?Uint8Array:Array)(i),this.litlenTable=a(e?p.subarray(0,t):p.slice(0,t)),this.distTable=a(e?p.subarray(t):p.slice(t))}).call(this)}catch(t){return this.restore_(),-1}return this.status=s.Status.BLOCK_BODY_END,0},s.prototype.decodeHuffman=function(){var t,i,e,r,a,n=this.output,h=this.op,u=this.litlenTable,o=this.distTable,f=n.length;for(this.status=s.Status.DECODE_BLOCK_START;;){if(this.save_(),(t=this.readCodeByTable(u))<0)return this.op=h,this.restore_(),-1;if(256===t)break;if(t<256)h===f&&(f=(n=this.expandBuffer()).length),n[h++]=t;else{if(i=t-257,r=s.LengthCodeTable[i],s.LengthExtraTable[i]>0){if((a=this.readBits(s.LengthExtraTable[i]))<0)return this.op=h,this.restore_(),-1;r+=a}if((t=this.readCodeByTable(o))<0)return this.op=h,this.restore_(),-1;if(e=s.DistCodeTable[t],s.DistExtraTable[t]>0){if((a=this.readBits(s.DistExtraTable[t]))<0)return this.op=h,this.restore_(),-1;e+=a}for(h+r>=f&&(f=(n=this.expandBuffer()).length);r--;)n[h]=n[h++-e];if(this.ip===this.input.length)return this.op=h,-1}}for(;this.bitsbuflen>=8;)this.bitsbuflen-=8,this.ip--;this.op=h,this.status=s.Status.DECODE_BLOCK_END},s.prototype.expandBuffer=function(t){var i,s,r,a=this.input.length/this.ip+1|0,n=this.input,h=this.output;return t&&("number"==typeof t.fixRatio&&(a=t.fixRatio),"number"==typeof t.addRatio&&(a+=t.addRatio)),s=a<2?(r=(n.length-this.ip)/this.litlenTable[2]/2*258|0)<h.length?h.length+r:h.length<<1:h.length*a,e?(i=new Uint8Array(s)).set(h):i=h,this.output=i,this.output},s.prototype.concatBuffer=function(){var t,i,r=this.op;return t=this.resize?e?new Uint8Array(this.output.subarray(this.sp,r)):this.output.slice(this.sp,r):e?this.output.subarray(this.sp,r):this.output.slice(this.sp,r),this.sp=r,r>s.MaxBackwardLength+this.bufferSize&&(this.op=this.sp=s.MaxBackwardLength,e?(i=this.output,this.output=new Uint8Array(this.bufferSize+s.MaxBackwardLength),this.output.set(i.subarray(r-s.MaxBackwardLength,r))):this.output=this.output.slice(r-s.MaxBackwardLength)),t},t.RawInflateStream=s});
//# sourceMappingURL=sourcemaps/RawInflateStream.js.map
